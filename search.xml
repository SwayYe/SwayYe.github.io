<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>读书笔记：《清华园日记》</title>
    <url>/2020/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E6%B8%85%E5%8D%8E%E5%9B%AD%E6%97%A5%E8%AE%B0%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center"><p>我尝想，日记是最具体的生命的痕迹的记录。以后看起来，不但可以在里面找到以前的我的真面目，而且也可以发现我之所以成了现在的我的原因</p>
</blockquote>
<a id="more"></a>
<p>这本书我从2019年11月还是读，期间断断续续，到20年2月份读完，然而十分惭愧，一直想要写一下这本书的读书笔记，却拖到4月份才开始动笔。</p>
<p>要说读这本书的缘由，有很大程度上，是因为看到网上的段子，季先生在自己的日记里骂大学老师、骂大学里面的考试，让我这个大学生不由得想要走进这位大师的清华生活。</p>
<h3 id="年代的差距似乎并没那么大"><a class="header-anchor" href="#年代的差距似乎并没那么大">¶</a>年代的差距似乎并没那么大</h3>
<p>在读《清华园日记》的时候，最让我惊讶的，其实是那个年代的大学生活，并没有我想象中的那样遥远。季羡林先生是1930年考入清华大学的，到现在差了90年，然而90年前的大学生活，与我来说并没差太多。纵观他的日记，文娱生活大都是看电影、看球赛、旅行游玩，若是差的最多的地方，恐怕是游戏这一块，那个年代无非是打牌和麻将，到我们这个年代，就多是电子游戏了吧，不过扑克和麻将，现在的大学生也还是有接触。</p>
<p>另外就是上课，那时候的大学生，好像也流行逃课，一小撮人逃课叫“小刷”，集体翘课叫“大刷”。上课的老师也分好坏，学生遇到quiz，考试，也会临时抱佛脚，挑灯夜战。</p>
<h3 id="大师何以成为大师"><a class="header-anchor" href="#大师何以成为大师">¶</a>大师何以成为大师</h3>
<p>季羡林先生的《清华园日记》，以及之前的胡适日记，让很多人觉得，原来那些取得丰硕成就的大师们，在年轻时也跟我们普通人一样，有这样那样的坏毛病。但是，在为“打牌”、“骂考试”发笑之余，我又不免反思，他们是如何在自己的学术领域攻下一席之地的呢。</p>
<p>在季的日记中，除了偶尔散漫的一面，我看到更多的是他勤奋刻苦的一面。季羡林先生对书的痴迷体现在日记中的处处角落，日记中最常说的一句话就是某某下午在读某书，或者为了写某一篇essay，花了四五天读参考文献。而他对于文学的热爱，也充斥于整本书，参与杂志的编撰，自己写文章投稿，找有名望的先生咨询意见，这些行为，无疑是走在同龄人的前列的。</p>
<p>季羡林在大四那年，下定决心要赴德留学，而他在毕业前，如愿拿到了前往德国交换的名额，从那之后，他在德国主修印度学，走上了自己的学术旅途。也许他离开清华的那一刻，还只是名普通的大学毕业生，但他所拥有的那些学术精神，奠定了其日后的博学之著。</p>
<h3 id="日记在今天的价值"><a class="header-anchor" href="#日记在今天的价值">¶</a>日记在今天的价值</h3>
<p>在读完这本书后，我又拾起了写日记的习惯，这也算是另一种收获吧。季老在70年前的日记中，找回了在清华园时自己，而我希望自己多年后也能在日记中找回现在的我。</p>
<p>我最近越发觉得，日记在今天有着更重要的价值。现在这个时代，我们总是通过互联网，与其他人相连。每每有所闲暇，第一件事就是拿起手机，刷朋友圈、刷微博，看看身边的人与事。电子产品的普及，也让娱乐活动随时随处可得，看小说、看剧，这些碎片化的时间沾满了我们的每分每秒，而与自己独处的时间却越来越少。</p>
<p>每天晚上，我打开日记本，开始回顾自己的一天时，久违的能够给予自己一小段独处的时间。反思自己今天又拖了什么任务，随便写写对于时事的看法，这之于当代，是稀缺的，亦是奢侈的。希望几年后，再读日记，能想明白，我为什么会成为那时候的自己，如果对于那时候的自己不太后悔的话，就再好不过了。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客迁移</title>
    <url>/2020/01/10/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>本人在去年10月份购置了一台新的电脑，旧的电脑还能用，但大部分时间都是躺在寝室吃灰了。软件及文件，我都已经迁移到了新的电脑中，唯独还差Hexo博客相关的文件，一直留在旧电脑中。<br>
拖到假期，终于有空来做博客迁移的工作，本以为会比较花时间，没想到还挺轻松就完成了，接下来就介绍一下流程</p>
<a id="more"></a>
<div class="note info"><p>
    笔者的迁移主要是从一台旧的电脑迁移到另一台电脑，换句话说，我完全没有继续在旧电脑上维护博客的打算，因此迁移方法简单粗暴。我在网上搜索的时候，看到有人利用git的branch，来实现多台设备同时能够维护博客，对我来说既麻烦也无必要，因而未予使用。
    </p></div>
<h2 id="1-配置基础环境"><a class="header-anchor" href="#1-配置基础环境">¶</a>1️⃣ 配置基础环境</h2>
<p>要配置基础环境，需要做以下几个步骤</p>
<ol>
<li>安装<code>git</code>，并生成密钥，保存到github账号中</li>
<li>下载并安装<code>Node.js</code>（<code>npm</code>会自己跟着装好）</li>
<li>使用<code>npm</code>安装<code>hexo</code> ，具体指令为<code>npm install -g hexo-cli</code></li>
</ol>
<p>这些都在 <a href="https://swayye.xyz/2018/12/28/%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B%EF%BC%9A%E5%AE%89%E8%A3%85%E5%8F%8A%E9%83%A8%E7%BD%B2%E7%AF%87/" target="_blank" rel="noopener">建站历程：安装及部署篇</a> 这篇文章中有介绍，在此就不再介绍</p>
<p>❗️ 注意，安装完<code>hexo</code>之后不用<code>hexo init</code></p>
<h2 id="2-迁移相关文件"><a class="header-anchor" href="#2-迁移相关文件">¶</a>2️⃣ 迁移相关文件</h2>
<p>需要迁移的文件只有：</p>
<ol>
<li>
<p>博客配置文件<code>./_config.yml</code></p>
</li>
<li>
<p>主题配置文件夹<code>./theme/</code></p>
</li>
<li>
<p>文章及相关内容的文件夹<code>./source/</code></p>
</li>
<li>
<p>模板文件夹<code>./scaffolds/</code></p>
</li>
<li>
<p>记录博客所有的插件的文件<code>./package.json</code></p>
</li>
</ol>
<h2 id="3-在新电脑中重新部署"><a class="header-anchor" href="#3-在新电脑中重新部署">¶</a>3️⃣ 在新电脑中重新部署</h2>
<p>还记得上一步中拷贝的<code>./package.json</code>嘛，只要在同一文件目录下运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>就会自动读取<code>package.json</code>文件中记录的插件列表，然后挨个安装，这样你在旧设备中安装的插件，在新设备中，都安装好了</p>
<p>之后的一切就照常，修改文章，生成静态文件，部署到git</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>建站历程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年10月11月随笔</title>
    <url>/2019/12/10/2019%E5%B9%B410%E6%9C%8811%E6%9C%88%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://s2.ax1x.com/2019/12/23/lpXEEF.jpg" width="900" height="550" alt="git" align="center">
<a id="more"></a>
<p>很惭愧，过去两个月的随笔一直拖到现在才更新，虽说学业确实很忙，但也绝对没有到抽不出时间写点东西的程度。究其原因，还是懒吧。值此放假后，翻了翻手机里的相册，挑了些图片，回忆一下这两个月的片段。</p>
<h3 id="话剧"><a class="header-anchor" href="#话剧">¶</a>话剧</h3>
<p>国庆上来之后，跟泽哥、fwh一起去杭州看了场话剧，名字叫《演砸了》</p>
<p>不怕被笑话，本人在人生中的前20年里，真的没有正儿八经地看过啥话剧，这次这部剧，虽不是啥经典之作，却也着实让我对话剧这门艺术产生了不小的乐趣。</p>
<img src="https://s2.ax1x.com/2019/12/23/lpXiuV.jpg" alt="lpXiuV.jpg" style="zoom:50%;">
<p>我以前觉得，话剧就是看演员在固定的场景下进行表演，相比于电影，既没有宏伟的布景，也没有额外的光影特效，没有什么吸引力。然而看完《演砸了》之后，我却体会到了话剧相比于电影的独特魅力。</p>
<p>首先话剧确实是在固定的场景内进行表演，但这也意味着一切表演都是真实且即时的。这就要求演员对于剧本足够熟悉，表演功力足够扎实，且有相当强的临场反应能力。经过了无数次排练之后，演员对剧本滚瓜烂熟，而且个人认为话剧演员的演技普遍是比其他影视演员要高的，所以观赏的时候，不会出现跳戏、尴尬的感觉。而说到临场反应能力，《演砸了》这部剧最新颖的地方便是用刻意设计好的情节，让观众产生演员是临场出糗的错觉。明知这一切都是虚构的，但看到演员面对各种状况下的窘境，依然会忍不住捧腹大笑。</p>
<p>而说到布景，《演砸了》应该是把布景中的道具发挥到极致的一部剧了。各类机关设计之巧妙，恐怕之前的话剧都不曾有过。像墙上画像的掉落、阁楼的倾斜、门板的倒塌，这类逼真的道具效果，我想不出是怎么设计的，只觉得精巧奇妙。</p>
<h3 id="🍺-🌄"><a class="header-anchor" href="#🍺-🌄">¶</a>🍺 &amp; 🌄</h3>
<p>11月前还能忙里偷闲。</p>
<p>去泽哥家蹭了几次饭，做的饭菜都非常不错，尤其是他给我们喝的起泡葡萄球，相比于传统的红葡萄酒，起泡葡萄酒喝起来味道更甘甜，跟红葡萄酒的苦涩完全不同，所以喝得还蛮嗨的</p>
<img src="https://s2.ax1x.com/2019/12/23/lpXkHU.jpg" alt="lpXkHU.jpg" style="zoom:50%;">
<p>11月初的时候，带着 <strong>Δ</strong> 的另外两个人去金山玩了一圈，朱泾那儿的东林寺，还是很小的时候去过，此番借着“导游”之名，又进去参观了一次，虽说大体上没啥变化，却也注意到了一些未曾关注之处，譬如池塘里鲤鱼竟然数量如此之多，个头如此之大。</p>
<img src="https://s2.ax1x.com/2019/12/23/lpXCj0.jpg" alt="lpXCj0.jpg" style="zoom:50%;">
<p>另外一处去的地方是枫泾古镇，当时游玩时没有拍什么照片。有意思的是，去的那天正值进博会调休放假，游客很少。褪去了人潮的喧嚣后，古镇的韵味比平时多了几分。以前一直觉得，中国的古镇，大多一般般，除了名字、建筑有所差异外，店面商铺大多雷同，缺乏地方特色，“古”字没有体现，另外当然还有国情特色人山人海，每次去的时候都是人挤人，心理上更添了些许厌恶。如今看来，人影稀疏时去古镇看看，还确实有几分滋味，只是这样的机会也不多罢。</p>
<h3 id="忙碌的final周"><a class="header-anchor" href="#忙碌的final周">¶</a>忙碌的Final周</h3>
<p>之前也说过，因为退了一门课，我这学期只学了三门专业课，按理说考试周复习起来应当没啥压力。然而我却在学期的最后一周，接到了一个大锅，直接导致我期末考试受到了严重影响。</p>
<p>事情要从学校的一二九歌会说起。这个歌会是学校历年都会举办的红歌合唱晚会，以学院为单位参加。按照惯例，都是大一的学生参与合唱，以及钢琴伴奏的。然而原来选的两位大一钢伴，却因为种种原因退出了（具体原因我在此不想做过多探讨）。结果老师在12月3号的时候找到我，希望我能去救场。</p>
<p>犹豫再三之后还是接了这个活，7天之内速成的曲子，自然效果不好，学院唱的是《十送红军》，曲子本身是很不错的，可惜最后没有发挥好，我只能说自己尽力了吧。</p>
<img src="https://s2.ax1x.com/2019/12/23/lpXp3n.jpg" alt="lpXp3n.jpg" style="zoom:50%;">
<p>完成了钢琴伴奏和final的任务，就剩下Winter EXPO的工作了。相比于之前的Summer EXPO，我这次跟深入地参与到了展览的准备工作中。前期的招募志愿者，EXPO前一天的布展，以及展览当天的招待来宾、维护场馆秩序，这些经历对我来说都是一次很好的锻炼。</p>
<img src="https://s2.ax1x.com/2019/12/23/lpXS9s.jpg" alt="lpXS9s.jpg" style="zoom:50%;">
<h3 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h3>
<p>写到这儿的时候，其实已经是2019年12月24日了。想来搭建这个破站，差不多就是一年前这个时候吧，时间真的过得很快，一晃21世纪的第二个十年，还有五六天的时间就要过完了。而我此刻还在为出国留学的项目申请做着准备，这些都是后话，之后有空的时候再写吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>每月杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年9月随笔</title>
    <url>/2019/10/03/2019%E5%B9%B49%E6%9C%88%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://github.com/SwayYe/Img/raw/master/blog/2019年9月随笔/封面.jpg" width="900" height="600" alt="git" align="center">
<a id="more"></a>
<h3 id="开学前的宁静"><a class="header-anchor" href="#开学前的宁静">¶</a>开学前的宁静</h3>
<p>学校是9月9号才开学，不过我从8月底就来了学校，算是过了几天平静而又充实的暑假吧。那几天在看《本能减脂》一书，学习了一些通过运动或饮食减脂的技巧。其中有一点是早起趁着空腹做一组HIIT（高强度间歇训练），不仅能够利用空腹这一阶段，让运动消耗更多的脂肪，而且还可以提高接下来一天的静息燃脂率。于是我在这几天经常7点起来，去学校操场晨跑+跳绳。运动完之后去吃早饭。</p>
<p>说到早饭，新学期我们学校换了一批餐饮店。二餐食堂多了吉祥馄饨、鱼喵喵，而一餐旁边多了一家麦当劳，那天（6号）赶上学校里的M记第一天营业，于是我运动完之后去那儿吃了一顿</p>
<p><img src="https://github.com/SwayYe/Img/raw/master/blog/2019%E5%B9%B49%E6%9C%88%E9%9A%8F%E7%AC%94/%E9%BA%A6%E5%BD%93%E5%8A%B3.jpg" alt="Img"></p>
<p>我点了粥+培根汉堡+煎蛋（原谅我记不住全名），后来店里的小姐姐还送了一杯咖啡。那天的早饭吃得很惬意，像极了那几天的生活。白天去图书馆提前学了一点课程内容（确实只是一点点），晚上便是篮球或其他的运动，洗完澡之后很放松得进行一些娱乐活动。没有听不懂的课，也没有赶不完的due，这样的日子是宁静而奢侈的，因此我倍感珍惜。</p>
<h3 id="忙碌的开始"><a class="header-anchor" href="#忙碌的开始">¶</a>忙碌的开始</h3>
<p>暑假在9月9号结束了。每每到开学之际，我都会感慨时间是如此无情而客观的存在。两年前这个时候，我才刚刚开始自己的大学生活。而现在，我竟已是以为大三“老人”，不得不为毕业开始操心了。</p>
<p>这学期我override了一门操作系统导论，这门课据说是学院ECE专业最硬核的一门课。短短两周内，就给我们三个due，而且与作业相关的内容，几乎都需要我们自己去搜索学习。</p>
<p><img src="https://github.com/SwayYe/Img/raw/master/blog/2019%E5%B9%B49%E6%9C%88%E9%9A%8F%E7%AC%94/%E4%B8%BB%E6%9D%BF.jpg" alt="Img"></p>
<p>第一份作业是要我们熟悉一下电脑的各个部件。于是我第一周周末回家的时候，拆开自己家电脑的机箱，重新清点了一遍上面的各个部件。这个机箱是我高中毕业的时候，另一个同学帮我配的。我全程只是OB看着他帮我装，那时候对于电脑各个部件毫无了解，而现在已经很熟悉了。</p>
<h3 id="犹豫过后的决定"><a class="header-anchor" href="#犹豫过后的决定">¶</a>犹豫过后的决定</h3>
<p>很讽刺的是，我在学期初下定决心override的课，即上面提到的“操作系统导论”，在这个月末我把它退了。</p>
<p>并不是因为课程太难，而是workload的原因。我是真的很想上这门课，也真心觉得这门课很有趣，但每周动辄两三个due，挤压了太多其他课的时间。可以预见到，我如果继续上这门课的话，接下来其他三门专业课一旦有了大作业，必然是血崩的结局。</p>
<p><img src="https://github.com/SwayYe/Img/raw/master/blog/2019%E5%B9%B49%E6%9C%88%E9%9A%8F%E7%AC%94/%E9%A9%AC%E7%89%9B%E7%AD%BE%E5%90%8D.jpg" alt="Img"></p>
<p>于是以一种很狼狈的形式，我得到了马牛（这门课的授课老师，也是我非常喜欢的一位老师）的签名。</p>
<h3 id="给祖国母亲庆生"><a class="header-anchor" href="#给祖国母亲庆生">¶</a>给祖国母亲庆生</h3>
<p>最后十一国庆理应归到10月份随笔的内容中，但我觉得一个月后再写，感情没那么强烈了，所以就趁着9月随笔写掉吧。我依稀还记得国庆60周年的时候，我坐在电视机前看国庆阅兵。按理说那一次阅兵阵势也足够大了，但年幼的我对整齐的军队不感兴趣，也不明白运送着一枚枚导弹的军用卡车驶过天安门城楼意味着什么。那一次阅兵，我只是坐在床上，陪着父亲渡过了无聊的两个小时。</p>
<p>然而到了二十出头的年纪，再看阅兵之时。想到祖国近百年经过的种种磨难，不由得热泪盈眶。越是了解近代史、越是跟国外网络、新闻媒体接触，就越发感慨祖国崛起之不易，因而也就越发为如今这盛世感到骄傲。</p>
<p>希望祖国的未来更加美好，也在此鞭策一直以来不够努力的自己，至少为将来的繁荣昌盛出一份力吧。</p>
<p>下面放一张他的旧图，不知道什么时候存在手机里的。阅兵的时候看到他任然无恙，但他确确实实已经不再年轻了。当然还有曾经的胡主席和温总理，他们也早已白发攀上眉头了，不由得再次感慨时间的无情。</p>
<p><img src="https://github.com/SwayYe/Img/raw/master/blog/2019%E5%B9%B49%E6%9C%88%E9%9A%8F%E7%AC%94/%E4%BB%96.jpg" alt="Img"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>每月杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>利用go编译器源码编译docker</title>
    <url>/2019/09/03/%E5%88%A9%E7%94%A8go%E7%BC%96%E8%AF%91%E5%99%A8%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在研究修改docker源码实现自定义功能，自然需要先学会源码编译。在网上找到许多教程都是利用docker环境进行源码编译，但是编译完之后，使用起来是个问题。相较之下，利用<code>go</code>编译器，直接编译源码，生成二进制文件的方法，方便很多。下面就来介绍一下具体如何操作。</p>
<a id="more"></a>
<h2 id="使用apt安装docker"><a class="header-anchor" href="#使用apt安装docker">¶</a>使用APT安装Docker</h2>
<p>要想使用自定义功能的docker，原理是编译出二进制文件之后，替换原来系统使用的docker二进制文件。因此，在介绍如何源码编译之前，需要给系统安装docker。我使用的是<code>Ubuntu 18.04 LTS</code>版本，因此后续的一切介绍，都是基于这个环境。首先，给Ubuntu安装<strong>docker CE</strong>，具体参考<a href="https://yeasy.gitbooks.io/docker_practice/install/ubuntu.html" target="_blank" rel="noopener">这篇文章</a>。</p>
<h2 id="安装go编译器"><a class="header-anchor" href="#安装go编译器">¶</a>安装go编译器</h2>
<p>具体版本有什么限制我不太确定，推荐是用官方编译使用的版本一样，也就是<code>go1.10.8</code>，但是我这里用了<code>go1.12.7</code>，也一样可行。</p>
<p>具体如何安装go编译器，以及配置<code>GOROOT</code>和<code>GOPATH</code>参考我的这篇博客：<a href="https://swayye.xyz/2019/08/28/Ubuntu-18-04-%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85go%E7%BC%96%E8%AF%91%E5%99%A8/" target="_blank" rel="noopener">Ubuntu 18.04 源码安装go编译器</a></p>
<h2 id="安装编译库"><a class="header-anchor" href="#安装编译库">¶</a>安装编译库</h2>
<p>构建前，安装必要的库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install gcc pkg-config btrfs-tools</span><br></pre></td></tr></table></figure>
<h2 id="下载源码"><a class="header-anchor" href="#下载源码">¶</a>下载源码</h2>
<p>从docker的<a href="https://github.com/docker/engine/releases" target="_blank" rel="noopener">github项目网址</a>下载任意版本的源码，将解压出来的文件夹重命名为<strong>docker</strong>。将<strong>docker</strong>目录移动到<code>$GOPATH/src/github.com/docker/</code>目录下。</p>
<h2 id="开始构建"><a class="header-anchor" href="#开始构建">¶</a>开始构建</h2>
<p>打开终端，进入到<code>$GOPATH/src/github.com/docker/docker</code>目录，执行编译指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/docker/docker</span><br><span class="line">VERSION=testbuild DOCKER_GITCOMMIT=1 ./hack/make.sh binary</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ul>
<li><code>VERSION=xxx</code>是指定构建后的docker版本，比如直接安装，会显示<code>18.09.3</code>，此处我们将版本命名为<code>testbuild</code>。</li>
<li>在编译指令中，你还可以选择储存引擎，只需要再命令前加上<code>DOCKER_GRAPHDRIVER=overlay2</code>就可以了</li>
<li>构建完成后，生成的二进制文件储存在<code>$GOPATH/src/github.com/docker/docker/bundles/binary-daemon</code>目录下，名字是<code>dockerd</code>。使用<code>ls -l</code>命令可以看到这里已经创建了软连接<code>dockerd -&gt; dockerd-testbuild</code></li>
</ul>
<h2 id="替换docker启动文件"><a class="header-anchor" href="#替换docker启动文件">¶</a>替换docker启动文件</h2>
<p>接下来就是最后一步，用生成的<code>dockerd</code>替换掉当前系统的docker启动文件。首先，停止系统中正在运行的docker引擎。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>找到docker服务文件的位置</p>
<p>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl cat docker.service</span><br></pre></td></tr></table></figure>
<p>你会在输出的第一行，看到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>
<p>这就是服务文件的位置了，按<code>q</code>退出终端中查看<code>docker.service</code>的程序</p>
</li>
<li>
<p>修改<code>docker.service</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>
<p>找到<code>ExecStart=/usr/bin/dockerd xxx</code>，将其中的<code>/usr/bin.dockerd</code>替换成刚刚生成的二进制文件，也就是<code>$GOPATH/src/github.com/docker/docker/bundles/binary-daemon/dockerd</code></p>
<p><strong>注意</strong>：这里的<code>$GOPATH</code>要用绝对路径，每个人设置的路径是不同的，如果你不清楚自己是真的，可以在终端输入以下指令查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$GOPATH</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="重载及启动docker服务"><a class="header-anchor" href="#重载及启动docker服务">¶</a>重载及启动docker服务</h2>
<p>替换完成后，终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>重载完成后，就可以启动引擎了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>验证是否替换成功，执行<code>sudo docker version</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Client:</span><br><span class="line"> Version:           18.09.7</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        2d0083d</span><br><span class="line"> Built:             Thu Jun 27 17:56:23 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          testbuild</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.7</span><br><span class="line">  Git commit:       1</span><br><span class="line">  Built:            Tue Aug 27 05:35:56 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">true</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.2.6</span><br><span class="line">  GitCommit:        894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc8</span><br><span class="line">  GitCommit:        425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure>
<p>看到Server一栏中，引擎版本已经更新成<code>testbuild</code>了</p>
<h2 id="启用experimental功能"><a class="header-anchor" href="#启用experimental功能">¶</a>启用Experimental功能</h2>
<p>有时候，你测试自己开发的docker功能，会提示未启用实验(Experimental)功能，要开启它，只需要修改<code>/etc/docker/daemon.json</code>文件，添加<code>&quot;experimental&quot;: true</code> （注意这行代码需要放在一个花括号<code>{}</code>里面）。</p>
<p>然后重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>
<p>这时候再<code>sudo docker version</code>，看到<code>Server</code>一栏中，有<code>Experimental: true</code>就行了。</p>
<h2 id="参考文章"><a class="header-anchor" href="#参考文章">¶</a>参考文章</h2>
<ul>
<li>
<p><a href="https://www.cnblogs.com/newguy/p/10609765.html" target="_blank" rel="noopener">最新版 源码编译 docker</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/44346322/how-to-run-docker-with-experimental-functions-on-ubuntu-16-04" target="_blank" rel="noopener">How to run docker with experimental functions on Ubuntu 16.04</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>docker日志</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>建站历程：主题美化篇——添加相册</title>
    <url>/2019/09/02/%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B%EF%BC%9A%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E7%AF%87%E2%80%94%E2%80%94%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://s2.ax1x.com/2019/09/02/ni9f4U.jpg" width="900" height="250" alt="git" align="center">
<p>这篇文章介绍如何给你的博客添加相册。</p>
<a id="more"></a>
<p>先贴一下自己目前博客的配置：</p>
<div class="note info">
    <p> Hexo: 3.8.0 </p>
    <p>Next: 7.0.0 </p> 
    <p>os: Windows_NT 10.0.18362 win32 x64</p>
</div>
<p>由于<code>Hexo</code>和<code>Next</code>的版本更新比较快，我有不太喜欢更新，所以目前适用的一些功能，可能在最新的版本无法使用。我找添加相册的方法时，就碰到了这种问题，所以在此特作声明。<br>
这是我目前的<a href="https://swayye.xyz/photos/" target="_blank" rel="noopener">相册</a>，具体实现原理是这样的：利用<code>python</code>脚本对本地的图片仓库进行修剪、生成所略同，并上传到<code>github</code>远程仓库。同时将<code>github</code>作为图床，获取这些图片在<code>github</code>上的链接，显示在博客的相册目录下。</p>
<h2 id="建立并上传github相册仓库"><a class="header-anchor" href="#建立并上传github相册仓库">¶</a>建立并上传github相册仓库</h2>
<h3 id="创建本地git仓库"><a class="header-anchor" href="#创建本地git仓库">¶</a>创建本地git仓库</h3>
<p>在你想要存放相册照片的地方创建一个名为<code>MyBlog_Images</code>的文件夹，打开终端，移动到<code>MyBlog_Images</code>的地址，建立本地git仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>在<code>MyBlog_Images</code>文件夹中创建两个子文件夹，名字为<code>photos</code>和<code>min_photos</code>。<code>photos</code>文件夹将用来存放原图，<code>min_photos</code>文件夹用来存放缩略图。</p>
<p>现在以一张测试图片为例，我们把它复制到<code>MyBlog_Images/photos</code>目录，注意所有图片需要以特定方式命名，格式为：<strong>yyyy-mm-dd_PicName.jpg/png/jpeg/gif</strong>，例如<strong>2019-08-31_test.jpg</strong>。</p>
<h3 id="创建并链接到github远程仓库"><a class="header-anchor" href="#创建并链接到github远程仓库">¶</a>创建并链接到github远程仓库</h3>
<p>在<code>github</code>中创建一个新的仓库，然后进入仓库所在的网页，你可以看到Quick setup的提示中，已经告诉你如何将本地仓库链接到这个远程仓库了。</p>
<p>同样的，在之前打开的终端（地址应该还是<code>xxx/MyBlog_Images</code>），输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/YourName/RepositoryName.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h2 id="获取python脚本"><a class="header-anchor" href="#获取python脚本">¶</a>获取python脚本</h2>
<p>从这个<a href="https://github.com/malizhigithub/HexoAlbumData" target="_blank" rel="noopener">仓库</a>下载配置文件，点击<code>Clone or download -&gt; Download ZIP</code>，或者在命令行中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:malizhigithub/HexoAlbumData.git</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置">¶</a>配置</h3>
<p>将<code>tool.py</code>和<code>Imageprocessing.py</code>文件放在<code>xxx/MyBlog_Images</code>路径下，打开并修改<code>tool.py</code>文件</p>
<figure class="highlight diff"><figcaption><span>文件位置：xxx/MyBlog_Images/tool.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- with open("E://YourBlog/themes/next/source/lib/album/data.json","w") as fp:</span></span><br><span class="line"><span class="addition">+ with open("YourBolgPath/themes/next/source/lib/album/data.json","w") as fp:</span></span><br></pre></td></tr></table></figure>
<p>在<code>YourBolgPath/themes/next/source/lib</code>目录下创建一个<code>album</code>文件夹，在<code>album</code>文件夹下新建<code>data.json</code>文件</p>
<p>若你想在相册放置较多格式的图片，也可以修改<code>tool.py</code>的代码</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- if fileformat.lower() == "jpg" or fileformat.lower() == "png" or fileformat.lower() == "gif":</span></span><br><span class="line"><span class="addition">+ if fileformat.lower() == "jpg" or fileformat.lower() == "png" or fileformat.lower() == "gif" or fileformat.lower() == "你的照片格式":</span></span><br></pre></td></tr></table></figure>
<p>另外一个需要修改的是<code>compress_photo()</code>函数的压缩程度，<code>tool.py</code>脚本会将<code>MyBlog_Images/photos</code>目录下的图片进行压缩，在<code>tool.py</code>代码中找到<code>compress_photo</code>的代码：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">def compress_photo():</span><br><span class="line">    '''调用压缩图片的函数</span><br><span class="line">    '''</span><br><span class="line">    src_dir, des_dir = "photos/", "min_photos/"</span><br><span class="line">    </span><br><span class="line">    if directory_exists(src_dir):</span><br><span class="line">        if not directory_exists(src_dir):</span><br><span class="line">            make_directory(src_dir)</span><br><span class="line">        # business logic</span><br><span class="line">        file_list_src = list_img_file(src_dir)</span><br><span class="line">    if directory_exists(des_dir):</span><br><span class="line">        if not directory_exists(des_dir):</span><br><span class="line">            make_directory(des_dir)</span><br><span class="line">        file_list_des = list_img_file(des_dir)</span><br><span class="line">        # print file_list</span><br><span class="line">    '''如果已经压缩了，就不再压缩'''</span><br><span class="line">    for i in range(len(file_list_des)):</span><br><span class="line">        if file_list_des[i] in file_list_src:</span><br><span class="line">            file_list_src.remove(file_list_des[i])</span><br><span class="line">    - compress('1', des_dir, src_dir, file_list_src)</span><br><span class="line">    + compress('压缩等级(1/2/3/4)', des_dir, src_dir, file_list_src)</span><br><span class="line"># 定义压缩比，数值越大，压缩越小</span><br><span class="line"># SIZE_normal = 1.0 1级</span><br><span class="line"># SIZE_small = 1.5  2级</span><br><span class="line"># SIZE_more_small = 2.0 3级</span><br><span class="line"># SIZE_more_small_small = 3.0   4级</span><br></pre></td></tr></table></figure>
<p>修改压缩等价，数字越大，压缩程度越高，图片就越模糊。</p>
<h2 id="修改next主题配置文件"><a class="header-anchor" href="#修改next主题配置文件">¶</a>修改Next主题配置文件</h2>
<p>将<code>JS&amp;CSS</code>文件夹下的所有文件复制到<code>YourBolgPath/themes/next/source/lib/album</code><br>
然后再将<code>photoswipe-ui-default.min.js</code>，<code>photoswipe.min.js</code>两个文件添加到<code>themes/next/source/js/src</code>中。</p>
<ul>
<li>修改<code>ins.js</code>:</li>
</ul>
<figure class="highlight diff"><figcaption><span>文件位置：YourBolgPath/themes/next/source/lib/album/ins.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">- var minSrc = 'https://raw.githubusercontent.com/lizhi/Blog_Album/master/min_photos/' + data.link[i];</span></span><br><span class="line"><span class="deletion">- var src = 'https://raw.githubusercontent.com/lizhi/Blog_Album/master/photos/' + data.link[i];</span></span><br><span class="line">// 替换成下面的代码</span><br><span class="line"><span class="addition">+ var minSrc = 'https://raw.githubusercontent.com/yougithubname/pathtoyourphotos/min_photos/' + data.link[i];</span></span><br><span class="line"><span class="addition">+ var src = 'https://raw.githubusercontent.com/yougithubname/pathtoyourphotos/photos/' + data.link[i];</span></span><br></pre></td></tr></table></figure>
<p>如何获取自己<code>github</code>仓库中的图片链接地址：</p>
<p>访问之前创建的<code>github</code>仓库网站，此时可以看到之前存着的测试图片<strong>2019-08-31_test.jpg</strong>，点击图片名称，会进入预览网站，<strong>右键</strong>点击图片，选择<strong>在新标签页打开图片</strong>，就可以看到图片地址，地址是以<code>https://raw.githubusercontent.com</code>开头的。</p>
<ul>
<li>
<p>修改<code>_layout.swig</code></p>
<p>在<strong>head</strong>部分添加以下代码</p>
<figure class="highlight diff"><figcaption><span>文件位置：YourBolgPath/themes/next/layout/_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &#123;&#123; partial('_partials/head/head.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &#123;% include '_partials/head/head-unique.swig' %&#125;</span><br><span class="line">  &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class="line">  &#123;% include '_third-party/analytics/index.swig' %&#125;</span><br><span class="line">  &#123;&#123; partial('_scripts/noscript.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  &lt;!-- 相册代码-head部分 --&gt;</span><br><span class="line"><span class="addition">+  &lt;script src="&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+  &lt;script src="&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;"&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>
<p>在<strong>body</strong>部分增加下面代码</p>
<figure class="highlight html"><figcaption><span>文件位置：YourBolgPath/themes/next/layout/_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/WebPage"</span> <span class="attr">lang</span>=<span class="string">"&#123;&#123; page.lang || page.language || config.language &#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处省略许多body部分其他代码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 相册代码-body部分 --&gt;</span></span><br><span class="line">&#123;% if page.type === "photos" %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- Root element of PhotoSwipe. Must have class pswp. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__scroll-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__ui pswp__ui--hidden"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__top-bar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--close"</span> <span class="attr">title</span>=<span class="string">"Close (Esc)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--share"</span> <span class="attr">title</span>=<span class="string">"Share"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--fs"</span> <span class="attr">title</span>=<span class="string">"Toggle fullscreen"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--zoom"</span> <span class="attr">title</span>=<span class="string">"Zoom in/out"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- element will get class pswp__preloader--active when preloader is running --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__icn"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__cut"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__donut"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-modal pswp__share-modal--hidden pswp__single-tap"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--left"</span> <span class="attr">title</span>=<span class="string">"Previous (arrow left)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--right"</span> <span class="attr">title</span>=<span class="string">"Next (arrow right)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption__center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>
<p>修改<code>post-details.swig</code>：</p>
<figure class="highlight diff"><figcaption><span>文件位置：YourBolgPath/themes/next/layout/_scripts/pages/post-details.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ &lt;script type="text/javascript" src="&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+ &lt;script type="text/javascript" src="&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>若你主题开启了<strong>fancybox</strong>功能（主题的<code>_config.yml</code>中显示<code>fancybox: true</code>），则需要修改<code>head.swig</code>，在<code>if theme.fancybox</code>前面添加如下代码，否则相册功能会有问题</p>
<figure class="highlight diff"><figcaption><span>文件地址：YourBolgPath/themes/next/layout/_partials/head.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+&#123;% if page.type === "photos"  %&#125;</span></span><br><span class="line"><span class="addition">+  &#123;% set theme.fancybox = false %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% if page.type !== "photos"  %&#125;</span></span><br><span class="line"><span class="addition">+  &#123;% set theme.fancybox = true %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% if theme.fancybox  %&#125;</span><br><span class="line">  &#123;% set fancybox_css_uri = url_for(theme.vendors._internal + '/fancybox/source/jquery.fancybox.css?v=2.1.5') %&#125;</span><br><span class="line">  &#123;% if theme.vendors.fancybox_css %&#125;</span><br><span class="line">    &#123;% set fancybox_css_uri = theme.vendors.fancybox_css %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &lt;link href="&#123;&#123; fancybox_css_uri &#125;&#125;" rel="stylesheet" type="text/css" /&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="添加photos目录"><a class="header-anchor" href="#添加photos目录">¶</a>添加photos目录</h2>
<p>在博客底层目录打开终端，并创建一个新的目录，命名为<strong>photos</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> YourBlogPath</span><br><span class="line">hexo n page photos</span><br></pre></td></tr></table></figure>
<p>修改主题的<code>_config.yml</code>，在<strong>menu</strong>中添加相册目录：</p>
<figure class="highlight diff"><figcaption><span>文件位置：YourBlogPath/themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  categories: /categories/ || th-list</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line"><span class="addition">+ photos: /photos || camera-retro # my photo gallery</span></span><br></pre></td></tr></table></figure>
<p>修改<strong>photos</strong>目录的<code>index.md</code>，添加如下代码：</p>
<figure class="highlight markdown"><figcaption><span>文件位置：YourBlogPath/source/photos/index.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: photos</span><br><span class="line">date: 2019-03-19 23:47:05</span><br><span class="line">type: "photos"</span><br><span class="line">fancybox: false</span><br><span class="line">comments: true</span><br><span class="line">---</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../lib/album/ins.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../lib/album/photoswipe.css"</span>&gt;</span></span> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../lib/album/default-skin/default-skin.css"</span>&gt;</span></span> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"photos-btn-wrap"</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"photos-btn active"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external"</span>&gt;</span></span>Photos<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"instagram itemscope"</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://yourbolg.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"open-ins"</span>&gt;</span></span>图片正在加载中…<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line">  (function() &#123;</span><br><span class="line"><span class="code">    var loadScript = function(path) &#123;</span></span><br><span class="line"><span class="code">      var $script = document.createElement('script')</span></span><br><span class="line"><span class="code">      document.getElementsByTagName('body')[0].appendChild($script)</span></span><br><span class="line"><span class="code">      $script.setAttribute('src', path)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    setTimeout(function() &#123;</span></span><br><span class="line"><span class="code">        loadScript('../lib/album/ins.js')</span></span><br><span class="line"><span class="code">    &#125;, 0)</span></span><br><span class="line">  &#125;)()</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="测试及部署"><a class="header-anchor" href="#测试及部署">¶</a>测试及部署</h2>
<p>现在，可以运行python脚本，并部署博客了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxx/MyBlog_Images</span><br><span class="line">python tool.py</span><br><span class="line"><span class="built_in">cd</span> YourBlogPath</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：如果你电脑中同时安装了python2和python3两个版本，在运行脚本的时候，需要在终端输入<code>python3 tool.py</code>而不是<code>python tool.py</code>。</p>
<p>一切顺利的话，部署结束后刷新自己的主页，就可以看到相册页面，以及测试图片了。</p>
<p>之后如果添加了新的照片，也是在终端执行一样的命令。</p>
<h2 id="参考文章"><a class="header-anchor" href="#参考文章">¶</a>参考文章</h2>
<ul>
<li>
<p><a href="http://elitedj.me/2019/02/25/%E3%80%90Hexo%E3%80%913-0%EF%BC%81%E4%B8%BABlog%E5%A2%9E%E5%8A%A0%E7%9B%B8%E5%86%8C%E9%A1%B5%E9%9D%A2/#more" target="_blank" rel="noopener">【Hexo】3.0！为Blog增加相册页面</a></p>
</li>
<li>
<p><a href="https://malizhi.cn/HexoAlbum/" target="_blank" rel="noopener">搭建Hexo博客相册</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>建站历程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年8月随笔</title>
    <url>/2019/09/02/2019%E5%B9%B48%E6%9C%88%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://s2.ax1x.com/2019/09/02/nCFoIf.jpg" width="900" height="300" alt="git" align="center">
<a id="more"></a>
<p>在经过了忙到炸的夏季学期考试周之后，我总算是有时间利用假期好好休息一下了。所以回忆起来，过去的一个月，以休息娱乐为主，实际上学习的时间没有计划的多（以前不都是这样的嘛）。</p>
<h2 id="意外之旅"><a class="header-anchor" href="#意外之旅">¶</a>意外之旅</h2>
<p>这次去江西的旅行实属意外之旅，旅游的起因是一次聚餐，我的几个高中同学，以及他们的父母一起吃了顿饭（我们这群人都是比较熟的朋友）。结果快吃好饭的时候，突然提到后一天他们要去江西旅游，然后问我们家要不要一起去，于是就这样被安排上了，一场说走就走的旅行。</p>
<p><a href="https://imgchr.com/i/nCF5Zt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/02/nCF5Zt.md.jpg" alt="nCF5Zt.md.jpg"></a></p>
<p>上面这张图拍摄于婺源县江湾镇篁岭景区的一座吊桥（具体名字已经记不清了）。这座桥连接着两个山腰，悬在几百米的高空，而我站的地方实际上是玻璃（没错，透明度极低的玻璃，往下看完全没有悬空的刺激感）。不过去的那天天气很好，蓝天白云，以及山麓的背景，个人觉得是不错的一张照片（但是身材和站姿实在是不太上镜）。</p>
<p><a href="https://imgchr.com/i/nCFWMd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/02/nCFWMd.jpg" alt="nCFWMd.jpg"></a></p>
<p>另一张比较喜欢的照片拍摄于三清山。这是上山途中，在上山走道的扶栏上，趴着一只甲壳虫。远景是名为“蟒蛇出洞”的奇石。拍照的时候，这只甲虫还在不停的爬，似乎也在跟着我们一同登山。</p>
<h2 id="ti9"><a class="header-anchor" href="#ti9">¶</a>TI9</h2>
<p>犹豫了一下，还是想在这篇随笔里提一下TI，也就是DOTA2一年一度最大的赛事——国际邀请赛（The International）。今年已经是第9届TI了，去年的时候，LGD战队是最有希望夺冠的一年，然而却败给了黑马OG，屈居亚军，赛后LGD四号位fy坐在电脑前，身后烟花升起的画面每次看了都让人心痛不已。</p>
<p><img src="https://s2.ax1x.com/2019/09/02/nCF2xH.gif" alt="nCF2xH.gif"></p>
<p>今年LGD和VG都在MAJOR赛事中表现不错，又赶上TI在上海举办，每个国内的Dotaer都希望能把冠军不朽盾留在黄浦江。赛前，浦江的建筑群投影了进入正赛的12支队伍的队标，可以说是很有牌面了</p>
<p><img src="https://s2.ax1x.com/2019/09/02/nCFIdP.jpg" alt="nCFIdP.jpg"></p>
<p>然而现实却依然残酷，在这个十分吃阵容的游戏中，国内队伍的BP（Ban &amp; Pick，指赛前禁用已经选择英雄的环节）被吃透了，常常被国外强队针对。而OG在这一届比赛中，体现了灵活多变的战术特点，他们开发出来的强势阵容，将其他队伍打得毫无招架之力。最后，LGD作为最后留在决赛日的中国战队，也倒在了败者组决赛，止步季军。而冠军，由OG卫冕，成为了TI历史上首个双冠王。</p>
<p><img src="https://s2.ax1x.com/2019/09/02/nCZKHA.jpg" alt="nCZKHA.jpg"></p>
<p>将近10天的比赛看下来，个人觉得OG今年这个冠军拿得实至名归。只能说包括LGD在内的中国战队，在战术开发，以及临场发挥上有所欠缺。我DOTA打得也很菜，但真的很热爱这个游戏。由于入门晚，说实话没能见证曾经CN DOTA的辉煌历史，只希望有生之年能再看到中国DOTA站上TI之巅吧。</p>
<h2 id="准备秋季学期"><a class="header-anchor" href="#准备秋季学期">¶</a>准备秋季学期</h2>
<p>秋季学期在9月初就要开始了。我从8月20号开始，就来学校。一方面提前学一些下学期的课程内容，一方面也重新布置一下寝室。</p>
<p><img src="https://s2.ax1x.com/2019/09/02/nCFhqI.jpg" alt="nCFhqI.jpg"></p>
<p>上面这张图是经过布置后，桌面的效果。相比于上学期，主要是有那么几个变化</p>
<h3 id="理线"><a class="header-anchor" href="#理线">¶</a>理线</h3>
<p>我买了一个可以固定再桌子下面的拖线板，然后用电线固定夹把三个USB数据线从桌子后面绕了过来，再用磁吸固定器固定再前面，这样以来把桌面上的线给藏到了后面，看起来整洁了好多。</p>
<h3 id="铁丝架"><a class="header-anchor" href="#铁丝架">¶</a>铁丝架</h3>
<p>买了一个固定在墙面上的铁丝架，用来防止手办，多肉和香薰。这样从原来的桌面以及置物架上腾出了不少空间。</p>
<h3 id="收纳盒"><a class="header-anchor" href="#收纳盒">¶</a>收纳盒</h3>
<p>我买了一些收纳盒，平时不会频繁使用的文件、本子，我都理进了收纳盒里，放在了左下角那个地方。如此一来，让整个桌面看起来更有序。另外桌面下没有拍出来，但是有另外几个收纳盒用来放置零食和水果。虽然不用盒子也可以放，但用方方正正的盒子把东西归类，既能让空间利用率更高，找起东西来也更方便，个人觉得还是挺值的。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>每月杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记：《人人都在说谎》</title>
    <url>/2019/08/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E4%BA%BA%E4%BA%BA%E9%83%BD%E5%9C%A8%E8%AF%B4%E8%B0%8E%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://s2.ax1x.com/2019/08/29/mb1tnP.jpg" width="900" height="400" alt="git" align="center">
<a id="more"></a>
<blockquote class="blockquote-center"><p>人们搜寻信息这一行为本身就是信息</p>
<p>他们何时何地搜寻真相、格言、笑话、地点、人物、事件或帮助，</p>
<p>可以在很大程度上反映他们的真实想法、欲望、恐惧和职业，</p>
<p>其程度之高是任何人都想象不到的。</p>
</blockquote>
<p>过去的半个世纪被称为信息时代，而过去的十年，在我看来，可以被称作大数据时代。网络的普及、计算机储存性能和运算能力的提升，让数据称为了如今最廉价，但也最有价值的物品。在我读这本书之前，对于数据想到最多的是用来训练AI的数据集。然而，当我合上这本书的时候，我意识到数据已经或即将对各行各业产生深远的影响，数据分析这么学科，将在不远的将来，发挥巨大的作用。</p>
<h3 id="摘下面具的网民"><a class="header-anchor" href="#摘下面具的网民">¶</a>摘下面具的网民</h3>
<p>在很小的时候，我接触网络时自己就被告知，网络是一个虚拟的世界，没有人知道屏幕背后的人究竟是谁。然而恰恰是这一层匿名的窗户纸，让一个人在网络上的行为、言论有着更高的可信度。这一点是《人人都在说谎》这本书的立足点，其中的例子，无一不在说明一个问题：在现实生活中，我们都是伪君子，在网络中的才是真实的自我。</p>
<p>作者赛思举的第一个例子就是2016年美国总统大选。特朗普的意外当选，在赛思看来，与他之前对奥巴马的研究中所发现的暗藏的种族歧视有关。</p>
<blockquote>
<p>特朗普拥趸最多的地区就是“黑鬼”一词的谷歌搜索量最多的地区</p>
</blockquote>
<p>08年时，当奥巴马成为总统时，表面上大部分人都在赞扬奥巴马或宣扬其当选的历史性意义，然而在网络上，一些州关于种族歧视的谷歌搜索量却骤增。这些州在地图上，与8年后特朗普的支持州高度重合。</p>
<p>其他的通过谷歌搜索数据展示的真相，诸如有多少美国男性是同性恋者？经济萧条是否会增加虐童案的数量？脸谱网上的学生是否在撒谎？</p>
<blockquote>
<p>在脸谱网上，我们展示的是有教养的自我，而不是真实的自我</p>
</blockquote>
<p>这些例子都十分生动，而且都用数据揭穿了人们的谎言。这也是我读这本书前半部分，感觉最有趣的地方。</p>
<h3 id="大数据是如何让人们对互联网欲罢不能的"><a class="header-anchor" href="#大数据是如何让人们对互联网欲罢不能的">¶</a>大数据是如何让人们对互联网欲罢不能的</h3>
<p>在这本书后半部分，关于大数据的应用中，我觉得最重要的一个内容是<strong>A/B测试</strong>。</p>
<p><img src="https://s2.ax1x.com/2019/08/29/mqJtl4.jpg" alt="mqJtl4.jpg"></p>
<p>A/B测试，通俗来说，就是（转自百度）：为Web或App界面或流程制作两个（<strong>A</strong>/<strong>B</strong>）或多个（<strong>A</strong>/<strong>B</strong>/n）版本，在同一时间维度，分别让组成成分相同（相似）的访客群组（目标人群）随机的访问这些版本，收集各群组的用户体验数据和业务数据，最后分析、评估出最好版本，正式采用。</p>
<p>按照书中的话来说，这是一种“开销极低、操作简易的黄金标准测试”。通过测试得到的结果，新闻媒体可以知道什么样的文章标题可以带来更多的点击量，网站设计者可以了解怎样的网页排版更吸引人，流媒体APP知道推荐什么样的视频可以留住使用者。</p>
<p>赛思引用《欲罢不能》一书中的那句话让我深有同感：</p>
<blockquote>
<p>屏幕另一端有上千人正在瓦解你的自律。</p>
</blockquote>
<h3 id="大数据并非万能"><a class="header-anchor" href="#大数据并非万能">¶</a>大数据并非万能</h3>
<p>既然大数据可以揭露那些不为人知的真相，可以窥探用户的使用习惯，那么大数据是否是万能的？像这样肆意地使用大数据，是否会有问题？</p>
<p>对于第一个问题，答案自然是：不能。不止一个人曾想过用大数据来预测一些人类社会的事件，比如说股票的走势、发展中国家的未来投资机遇等等。但这些尝试几乎都以失败告终，因为当我们用数据来寻找各种变量之间关联时，会遇到一个无法逾越的问题——纬度的诅咒。</p>
<p>纬度的诅咒就是当变量较多而观察（测试数据）较少时，某一些变量会“幸运”地与目标出现关联性，然而这个关联性往往不具有现实意义，一旦观察数量变多，或者变量减少之后，这种关联性就会自然消失。</p>
<p>对于第二个问题，答案是肯定的。大数据虽然力量巨大，但其背后，存在着道德问题。已经有不少文艺作品表达过对于信息时代利用数据预测人类行为的担忧。如果政府通过大数据，预测一个人很有可能实施犯罪，警方是否应该立即逮捕TA？即使TA并没有做出犯罪的行为？如果赌场利用大数据，让赌徒栽更多的钱在他们的赌场上，是否合法？当贷款机构根据数据分析来决定是否给借贷人放贷，是否会给整个市场带来影响。这些问题的答案，《人人都在说谎》没有回答，因为这些案例先前从未出现过。</p>
<h3 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h3>
<p>这本书算是一本介绍数据科学的科普读物，没有太多晦涩的术语，内容很有意思。读完这本书后，我越发深信未来是大数据的时代。无论是自然科学、计算机科学，还是社会科学，都将越来越依赖无穷无尽的数据集。那些数据在未来应用的畅想，有的令人期待万分，有的则让人毛骨悚然。我会畏惧一些大数据的应用，并非因为它们有悖于道德，而是因为应用数据的人会撒谎。也许我现在的行为，已经被他人记录、分析、利用，但我可能到死都不会知道。数据不会撒谎，但人会撒谎，人人都在说谎。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 源码安装go编译器</title>
    <url>/2019/08/28/Ubuntu-18-04-%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85go%E7%BC%96%E8%AF%91%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>声明 </p></div>
<p>这篇文章介绍的是如何在<code>Ubuntu 18.04 LTS</code>下安装<strong>1.5及更高版本</strong>go语言编译环境的方法。由于1.5及更高版本的go语言编译器需要依赖go1.4版本，所以我们需要在安装1.4版本后，再安装更高版本。</p>
<h3 id="前期准备"><a class="header-anchor" href="#前期准备">¶</a>前期准备</h3>
<h4 id="安装必要的工具"><a class="header-anchor" href="#安装必要的工具">¶</a>安装必要的工具</h4>
<p>在命令行中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install bison ed gawk gcc libc6-dev make</span><br></pre></td></tr></table></figure>
<h4 id="下载go语言封装包"><a class="header-anchor" href="#下载go语言封装包">¶</a>下载go语言封装包</h4>
<p>前往<code>https://golang.org/dl/</code>，分别下载<code>1.4</code>版本及更高版本的封装包。这里以<code>go1.12.7</code>为例。注意，我们是在Linux Ubuntu系统下安装go的，因此下载的封装包，文件名应该是<code>go1.xx.xx.linux-amd64.tar.gz</code>。</p>
<p>除了从网页上下载，你也可以用<code>wget</code>命令在终端直接下载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="设置环境变量"><a class="header-anchor" href="#设置环境变量">¶</a>设置环境变量</h3>
<p>修改<code>/etc/profile</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>在结尾处添加</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+	export GOROOT=$HOME/go</span></span><br><span class="line"><span class="addition">+	export PATH=$PATH:$GOROOT/bin</span></span><br><span class="line"><span class="addition">+	export GOPATH=$HOME/go_program</span></span><br></pre></td></tr></table></figure>
<p>修改完之后，执行下面的命令使配置文件生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<div class="note info"><p>注意 </p></div>
<ul>
<li>
<p>Linux是一个多用户的操作系统。每个用户登录系统后，都会有一个专用的运行环境。使用修改<code>/etc/profile</code> 文件进行环境变量的编辑，是对所有用户有用。如果你修改的环境变量，只想对当前用户生效，那就对<code>~/.bashrc</code>文件进行环境变量的编辑，只对当前用户有用。</p>
</li>
<li>
<p>不会使用vim的话，可以把命令行中的<code>vim</code>修改成<code>gedit</code>。不过还是推荐用vim，这边涉及到的操作是：按<code>Insert</code>进入插入模式，在文件结尾添加上面提到的三行代码。然后按<code>Esc</code>退回到命令行模式，按<code>：</code>进入<code>Last line mode</code>，输入<code>wq</code>保存并退出就行啦。</p>
</li>
<li>
<p><code>$HOME</code>是linux系统中预设好的环境变量，指向<code>~</code>所在的文件目录，如果你不知道在你系统中<code>$HOME</code>具体是哪里的话，可以在命令行中输入<code>echo $HOME</code>查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swayye@swayye-ThinkPad-T470p:~$ <span class="built_in">echo</span> <span class="variable">$HOME</span></span><br><span class="line">/home/swayye</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在修改的<code>/etc/profile</code>中的最后一行，也就是<code>GOPATH</code>那一行代码，你可以自己指定文件目录，记得修改完<code>/etc/profile</code>之后，要自己去那个目录创建对应文件夹，以我为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/swayye/go_program</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装go1-4"><a class="header-anchor" href="#安装go1-4">¶</a>安装go1.4</h3>
<p><code>cd</code>到下载<code>go1.4.linux-amd64.tar.gz</code>的目录，解压压缩包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf go1.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压完成后，会在当前目录生成名为<code>go</code>的文件夹，将文件夹移到<code>/home/xxx</code>，xxx为计算机名，并将文件名改为<code>go1.4</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv go /home/xxx/go1.4</span><br></pre></td></tr></table></figure>
<p>安装<code>go1.4</code>编译器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> go1.4/src</span><br><span class="line">sudo CGO_ENABLED=0 ./make.bash</span><br></pre></td></tr></table></figure>
<p>上文提到过，安装1.4以上的go编译器需要依赖1.4版本，这个在编译器领域叫<code>bootstrapping</code>，中文翻译叫<strong>自举</strong>或<strong>自展</strong>，通俗地讲“用要编译的目标语言编写其编译器。</p>
<p>Go 1.5开始编译器和运行时用go自身编写，<code>all.bash</code> 编译脚本会在<code>$GOROOT_BOOTSTRAP</code>环境变量中查找一个已经存在的go tool chain，实际上就是要有一个编译好的<code>bin/go</code>程序。这里我们运行好1.4版本的<code>./make.bash</code>后，会在<code>/home/xxx/go1.4/bin</code>生成一个二进制文件，现在我们把它添加为<code>$GOROOT_BOOTSTRAP</code>环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT_BOOTSTRAP=/home/swayye/go1.4</span><br></pre></td></tr></table></figure>
<p>这样我们就可以编写更高版本的go编译器了</p>
<h3 id="安装go1-12-7"><a class="header-anchor" href="#安装go1-12-7">¶</a>安装go1.12.7</h3>
<p>同样地，解压1.12.7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf go1.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>将解压出来的<code>go</code>文件夹移到<code>/home/xxx</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv go /home/swayye</span><br></pre></td></tr></table></figure>
<p>安装1.12.7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/swayye/go/src</span><br><span class="line">./all.bash</span><br></pre></td></tr></table></figure>
<p>在完成安装后输入<code>go env</code>，如显示以下内容，说明成功了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swayye@swayye-ThinkPad-T470p:~$ go env</span><br><span class="line">GOARCH=<span class="string">"amd64"</span></span><br><span class="line">GOBIN=<span class="string">""</span></span><br><span class="line">GOCACHE=<span class="string">"/home/swayye/.cache/go-build"</span></span><br><span class="line">GOEXE=<span class="string">""</span></span><br><span class="line">GOFLAGS=<span class="string">""</span></span><br><span class="line">GOHOSTARCH=<span class="string">"amd64"</span></span><br><span class="line">GOHOSTOS=<span class="string">"linux"</span></span><br><span class="line">GOOS=<span class="string">"linux"</span></span><br><span class="line">GOPATH=<span class="string">"/home/swayye/go_program"</span></span><br><span class="line">GOPROXY=<span class="string">""</span></span><br><span class="line">GORACE=<span class="string">""</span></span><br><span class="line">GOROOT=<span class="string">"/home/swayye/go"</span></span><br><span class="line">GOTMPDIR=<span class="string">""</span></span><br><span class="line">GOTOOLDIR=<span class="string">"/home/swayye/go/pkg/tool/linux_amd64"</span></span><br><span class="line">GCCGO=<span class="string">"gccgo"</span></span><br><span class="line">CC=<span class="string">"gcc"</span></span><br><span class="line">CXX=<span class="string">"g++"</span></span><br><span class="line">CGO_ENABLED=<span class="string">"1"</span></span><br><span class="line">GOMOD=<span class="string">""</span></span><br><span class="line">CGO_CFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">CGO_CPPFLAGS=<span class="string">""</span></span><br><span class="line">CGO_CXXFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">CGO_FFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">CGO_LDFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">PKG_CONFIG=<span class="string">"pkg-config"</span></span><br><span class="line">GOGCCFLAGS=<span class="string">"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build290674534=/tmp/go-build -gno-record-gcc-switches"</span></span><br></pre></td></tr></table></figure>
<p>你还可以测试一个简单的代码：</p>
<figure class="highlight go"><figcaption><span>文件位置：/home/swayye/go_program/hello.go</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">println</span>(<span class="string">"Hello"</span>, <span class="string">"world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go run hello.go</span><br></pre></td></tr></table></figure>
<p>输出<code>Hello world</code>，说明就没有什么问题了。</p>
<h3 id="参考文献"><a class="header-anchor" href="#参考文献">¶</a>参考文献</h3>
<ul>
<li><a href="https://blog.csdn.net/y5492853/article/details/79932882" target="_blank" rel="noopener">Ubuntu16.04下源码安装go1.10.1编译器</a></li>
<li><a href="https://www.cnblogs.com/majianguo/p/7258975.html" target="_blank" rel="noopener">从源码安装golang</a></li>
</ul>
]]></content>
      <categories>
        <category>折腾系统</category>
      </categories>
      <tags>
        <tag>GO</tag>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年7月随笔</title>
    <url>/2019/08/22/2019%E5%B9%B47%E6%9C%88%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://s2.ax1x.com/2019/08/22/mdKk5D.jpg" width="800" height="300" alt="git" align="center">
<a id="more"></a>
<h2 id="docker"><a class="header-anchor" href="#docker">¶</a>Docker</h2>
<p>这个月最令人激动的事情是成功进入了学院某位老师的实验室，能够跟着那边的研究生一起做无线通信方向的研究。其中涉及到最关键的一项技术就是容器（container），因此会大量涉及到docker——目前最大的开源容器管理项目。</p>
<p><a href="https://imgchr.com/i/mdKjdf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/08/22/mdKjdf.png" alt="mdKjdf.png"></a></p>
<p>除了熟悉docker 的各种操作之外，我还需要对于这个项目的代码有一定的了解，因为实验室的项目需要根据自己的需要，定制一些与容器操作相关的功能。换句话说，我需要直接修改docker的代码。不得不说，这对于我是一个不小的挑战。一是docker项目是由<code>go</code> 语言写的，对于我来说是一种完全陌生的语言。二是这个项目的代码量非常庞大，我之前还从来没有接触过这种级别代码量的程序，各个代码之前的联系、交互非常难理清楚。</p>
<p>但不管怎么说，这个机会来之不易，而且也意义重大。无论是对于我能力的提升，还是为我之后升学、求职增加筹码，都是非常好的契机，好好把握吧。</p>
<h2 id="卑微的夏天"><a class="header-anchor" href="#卑微的夏天">¶</a>卑微的夏天</h2>
<p>我们学院的学制比较特殊，夏季学期要一直到8月中旬才结束。然而学校里的其他学院，早在6月末就考完了期末考试发暑假了。这就导致我们成了学校中的留守儿童，许多餐厅都关门，各个教学楼也翻新装修，一大早就是挖掘机施工的声音。我们学院的同学，每每到了这种时候，都会感到来自灵魂深处的卑微。</p>
<p><a href="https://imgchr.com/i/mdKXeP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/08/22/mdKXeP.jpg" alt="mdKXeP.jpg"></a></p>
<p>上面这张图来自学校里我最喜欢吃的一家面馆。还好她在期末考试之前没有关（然后我写这边随笔的时候，也已经装修关了）。之所以喜欢来这儿，除了这边的汤包、生煎、面都做得很好吃外，另一个重要原因就是离学院楼比较近（到了下一部分就知道为什么跟学院楼有关系了）。总之这边汤包嫩薄的面皮，里面鲜香的汤汁，以及干而不腻的葱油拌面，几乎成了支撑我熬过这忙碌7月的唯一动力。</p>
<h2 id="被困学院楼"><a class="header-anchor" href="#被困学院楼">¶</a>被困学院楼</h2>
<p>起这个副标题，其实多半是在自嘲。我自然不是真正被囚禁在了学院楼，只是这一个月来，我在学院楼呆的时间实在是太长了，除了上课和洗澡睡觉，大部分的时间都在那栋名为“龙宾楼”的建筑里。</p>
<p>我被迫呆在学院楼，很大程度上是因为工导TA的工作。工导课学生们的Project 2（自选题目的DIY项目）马上就要展示了。其中不乏需要用到3D打印的项目，而学院楼的实验室就有3D打印机。他们发给我3D建模的文件后，我需要用实验室的电脑生成切片文件（3D打印机需要切片文件才知道如何走线），然后把文件导入进打印机里打印。</p>
<p><a href="https://imgchr.com/i/md3TKJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/08/22/md3TKJ.jpg" alt="md3TKJ.jpg"></a></p>
<p>这个工作没什么技术要求，但是却非常耗时间。我需要呆在3D打印机的旁边，时不时地去查看打印机的打印情况。经常会出现上面这张图里面的状况，因为某种原因，打印机喷头的线没有正确地附着到部件上，而是留在了喷头附近，越堵越多。这种时候就必须把平台上的部件铲掉，清除掉喷头附近的线，然后调整打印切片的参数（走线速度，填充速度等等），重新开始。本来就已经是很麻烦的事了，正好这个学期还有很多门其他的课程需要用到3D打印机，这就导致打印机的资源十分紧缺，打印一个部件，往往要等前一个打印部件完成，而且还得掐着时间，等上一个部件打印完成马上去抢机器，否则手慢的话，就只能等下一轮了。</p>
<p>我在这个月最痛苦的回忆，就是每天早上7点起来，匆匆吃个早饭，8点在实验室门口等着开门去抢打印机。因为这个时候，前一天晚上的部件一般都打完了，会有很多打印机空着。</p>
<h2 id="expo"><a class="header-anchor" href="#expo">¶</a>EXPO</h2>
<p>月末的时候，夏季的EXPO在学院楼举办。这既是这学期各个工程课，展示自己项目成果的舞台，也是学院向外界宣传自己学院的平台。作为工导课的TA，看到学生们的项目一步步从零开始，做到有模有样，最后在EXPO上大放异彩，真的为他们感到自豪。</p>
<p><a href="https://imgchr.com/i/mdKvo8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/08/22/mdKvo8.md.jpg" alt="mdKvo8.md.jpg"></a></p>
<p>我本身的专业知识，其实无法从技术上帮他们太多的忙。唯一能做的，无非就是根据往年那些成功项目的经验，给他们的项目一些意见。所以说他们最终能做到那样的完成度，大部分都是自己的功劳。</p>
<h2 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h2>
<p>以上就是7月的一些小结，期末考试就在眼前，暑假也终于要来了。希望等到我写8月的随笔时，我在暑假能够多做一些事情，不要又是徒有计划而无行动了。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>每月杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年6月随笔</title>
    <url>/2019/07/05/2019%E5%B9%B46%E6%9C%88%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://s2.ax1x.com/2019/07/05/ZaKno9.jpg" width="900" height="600" alt="git" align="center">
<a id="more"></a>
<h2 id="ta"><a class="header-anchor" href="#ta">¶</a>TA</h2>
<p>这学期当了工导的助教，其中非常重要的事情就是就是Gameday，一般是在学期中期，上课的学生经过几个礼拜的努力，根据老师指定的规则做出相应的作品，并予以展示。今年的Gameday主题是可伸缩桥。大家最后的完成度很不错，有不少桥梁的设计十分精妙。有个别组，在展示的时候，一开始出了问题，不安与紧张写在他们的脸上。但是在经过调试，桥重新正常工作的时候，那种如释重负的喜悦，绝对是Gameday最有魅力的地方。</p>
<p><a href="https://imgchr.com/i/ZaKQRx" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/05/ZaKQRx.jpg" alt="ZaKQRx.jpg"></a></p>
<p>这次Gameday从晚上6点半，一直持续到10点半。四个小时里，我大部分时间都是站着的，而且因为要主持，讲得喉咙也有些沙哑。但满足感完全盖过了这些疲惫。Gameday前的那个周末，我搭完了固定桥梁用的桥墩。Gameday前一天，我和实验室老师在场地上安排学生测试，当时还有不少同学有这样那样的问题。可以说，那一周，我有不少时间耗在准备Gameday上面，而上这门课的同学，也有不少在熬夜做桥。但在那个夜晚，看到大家完成的喜悦，听到周遭同学的鼓励与喝彩，我觉得这一切都是值得的，相信肝桥的人也是这么认为的吧。</p>
<h2 id="吃-玩-健身"><a class="header-anchor" href="#吃-玩-健身">¶</a>吃 玩 健身</h2>
<p>Gameday的那个礼拜（6月分的第一个礼拜）结束之后，我算是忙里偷闲，放松了一下。</p>
<p><img src="https://s2.ax1x.com/2019/07/05/ZaKMJ1.jpg" alt="ZaKMJ1.jpg"></p>
<p>去学校旁边的La Bamba吃了一顿高热量夜宵。同行的人喝着酒，开始玩起了真心话大冒险，我因为晚饭没怎么吃，来这主要是吃东西为主，所以就顺理成章得逃掉了这个危险活动。这个月没什么假期，所以娱乐活动最多也就是看看电影 。最近月末的上映的《蜘蛛侠：英雄远征》，我特地赶在上映那天（正好的周五）去看了以免剧透。看完真的感觉很过瘾，作为有些资深的漫威电影粉，看到老一批演员的离开，新一批演员接过大旗，感慨良多。最后看完菜单的时候，再一次被漫威电影宇宙的精妙布局而惊叹。</p>
<h2 id="逐渐开始忙碌"><a class="header-anchor" href="#逐渐开始忙碌">¶</a>逐渐开始忙碌</h2>
<p>到了第二周开始，就开始进入Mid以及各种大due连轴转的状态。平时不太忙的时候，我每天醒来，习惯性地会把前一天的日历纸头撕掉。但是忙的时候，这样子的事便会很容易忘记。这一次便是连着5天的日历都没有撕，每每遇到这种时候，就会忍不住思考，过去几天的忙碌，究竟是收获满满，还是碌碌无为。只是最近这次，我似乎是连思考这个问题的精力都没有了，只想来一次8小时以上精致睡眠。我已经忘了上次睡8小时以上是什么时候了。</p>
<p><img src="https://s2.ax1x.com/2019/07/05/ZaKKiR.jpg" alt="ZaKKiR.jpg"></p>
<p>一方面是作业的压力，另一方面还有升学的负担。作为成绩一般的大二学生，想要在大三大四，申请到一个好的硕士项目，拉高GPA以外，最重要的便是科研经历。我之前申请了自己学院老师开的一个PRP（本科生研究项目）课题，是关于RL的。虽然我在RL方面的基础几乎为0，但是幸运地被通过了。于是乎接下来的一个月，我除了完成作业以外，还得腾出时间来学RL。</p>
<p>以上就是6月份的一些记录。之前两个月的随笔，到现在都还没有填坑。看缘分吧</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>每月杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年3月随笔</title>
    <url>/2019/04/01/2019%E5%B9%B43%E6%9C%88%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://s2.ax1x.com/2019/05/01/EYDqFe.jpg" width="900" height="600" alt="git" align="center">
<a id="more"></a>
<p>第二篇月杂记了，有些恍惚，春季学期开学已经是上个月的事了。虽说时间是过得很快，但其实细数这一个月，我其实也做了很多事情了。也有许多或感动或高兴或失落的时候。</p>
<h2 id="生日"><a class="header-anchor" href="#生日">¶</a>生日</h2>
<p>生日那天是周六，因为要回家，于是约了朋友周五一起去吃了一顿火锅，虽说请客买单是理所当然的事，但是这种事因为怕被父母说，于是用的钱都是直接攒的，还贴了一些花呗的钱。最直接的影响就是3月份接下来的日子预算直接爆炸，每天只能过紧巴巴的日子。不过这其实也没什么，正好想要减肥，乘着机会可以控制一下饮食。（话虽这么说，不还是喝了好几倍奶茶，吃了几顿炸鸡嘛）</p>
<p>最开心的大概就是生日会陆陆续续收到的生日礼物。本来没有预料到这次会有这么多人送的，生日过后的那个礼拜，基本上一天收到一个礼物的节奏，简直幸福感爆棚。附上一张收到的老婆手办</p>
<p><img src="https://s2.ax1x.com/2019/05/01/EYrFYQ.jpg" alt></p>
<h2 id="workshop"><a class="header-anchor" href="#workshop">¶</a>Workshop</h2>
<p>我所在的部门，每年的这个学期都会办一个关于<code>LaTeX</code>的workshop，教其他同学如何用TeX写报告。去年的workshop办下来反响并不好，很多人都说讲的太快了，吸收不了。于是我们今年为了解决这个问题颇下了一番功夫。提前准备PPT，先后两轮试讲，找别人试听，然后听取反馈意见。最后办下来效果好像还不错，也算是为部门做了点贡献吧。</p>
<h2 id="学习"><a class="header-anchor" href="#学习">¶</a>学习</h2>
<p>说到学习，心情又不由得低落了起来。这个学期除却两门红课，其实只有两门专业课，一门“信号与系统”，一门“工程概率方法”。然而我这两门课依然学得不好，两个MID的成绩可以用惨不忍睹来形容。已经忘了是第几次考砸了，似乎进了大学后，各类工科的课程考试就没几次是考好的。我似乎一直没有适应大学的考试模式，按理说上课内容多，考试准备时间少，像我这样子领悟能力比较差的人，理应花更多的时间看课件、刷题才对，然而缺乏自制力的我，每每都是到考试前才匆忙复习，本身题目做得少，又不愿意刷题，考砸了也是完全是理所当然的事。别的我不清楚，我只知道如果再像这样下去，我提升GPA是毫无可能。</p>
<h2 id="家"><a class="header-anchor" href="#家">¶</a>家</h2>
<p>这学期由于周五都是上午上完课就结束了，所以我这个月回家的频率十分之高。然而回家后，我最常感受到的确实焦虑。我是父母的第二个孩子，所以我的父母比同龄人的基本上都要大上至少七八岁。再加之他们青年时做的是体力活，也缺乏保养，所以父母的衰老，显得格外明显，也格外的早。很难想象，我的父母，已经到了隔三差五要去医院看病的地步，最说不是特别要紧的病，但家里随处可见的药，无不在提醒我父母的身体已不再如他们的精神那般坚强。而再加之我无言以对的大学成绩，每每回家，内心总会被愧疚装满。</p>
<h2 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h2>
<p>也许在自己的朋友面前，我是个乐观随和的人。但其实这是因为每次心中有负面情绪的时候，我都倾向于憋在心里。此番把内心的情绪写在随笔里，似乎终于给了我机会抒发，等到收笔时刻，似乎已没那么负面。希望4月能对我好一点吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>每月杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记：《乌合之众》</title>
    <url>/2019/03/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://s2.ax1x.com/2019/05/01/EYDtIg.jpg" width="900" height="600" alt="git" align="center">
<blockquote class="blockquote-center"><p>这个时代最基本的特征之一就是：<br>
群体的无意识行为<br>
替代了个体的有意识行为</p>
</blockquote>
<a id="more"></a>
<p>从高中时候就想要阅读的一本书，但是读完之后却觉得有些失望。虽然被誉为研究社会心理学的必读经典，《乌合之众》其实有许多站不住脚的论点，而且还有不少在如今看来无法被原谅的种族主义、性别歧视主义观点。</p>
<p>首先来说说那些歧视性的言论。勒庞认为“盎格鲁-撒克逊人比拉丁民族更严谨理性”，而“在亚洲一些野蛮人的部落中流传着这样的风俗：当他们将骁勇善战的对手击败后，往往会吃下这个人的心脏，认为这样就可以得到他的全部力量和勇气。”前者源于勒庞自己的观察，而后者则明显源于道听途说。而他对女性的评价让人读了会大跌眼镜，在此摘录几句：</p>
<blockquote>
<p>“群体的某些特点，如冲动、急躁、缺乏理性、没有判断力和批判精神、夸大感情等等，几乎总是可以在低级进化形态的生命中看到，例如妇女、野蛮人和儿童。”<br>
“产生这种误认的经常是妇女和儿童——即最没有主见的人。”<br>
“就像女人一样，是受情绪支配的生物体，一下子便会陷入极端。”</p>
</blockquote>
<p>如果从时代背景的角度来看，也许勒庞是无辜的，毕竟真正意义上的大规模女权运动浪潮，一直到十九世纪末才开始。在勒庞著书的年代，尤其是像勒庞这样的贵族眼里，女性确实是地位低下、未受教育的愚昧人群代表。</p>
<p>可是就是这样的一本充斥着偏见、歧视的书，被这么多人推荐，自然是有一定道理的。我读完书后翻阅了一些书评，才了解到这本书最大的价值在于第一次提出“群体是愚蠢的”这一观点。</p>
<blockquote>
<p>“创造和领导者文明的，从来都是少数的高级知识分子而不是群体。”</p>
</blockquote>
<p>群体最大的特征就是冲动、不会深思熟虑、易受暗示的左右。虽然论证的过程不够严谨，但观点本身没有什么大错，这也是我读完这本书收获最大的地方。无论是历史中的一众人民运动（书中多次提到的法国大革命，或是中国近代的义和团等等），还是如今我们生活中随处可见的网络节奏，似乎都在印证着群体的盲目性。</p>
<p>然而换一个角度讲，当自己对该观点深信不疑之时，我是否已经成为了大众愚蠢论的信徒之一，成为了一个受暗示左右的群体的成员？如果群体真的是盲目、愚蠢的，那么为什么科研要由一个团队来做，为什么由党派、议会控制的国家机器可以在全世界运作良好？还是这里的群体，与勒庞所说的群体，并非同一概念？或许这需要我了解更多的社会心理学知识才能给自己答案吧。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>写在20岁生日这一天</title>
    <url>/2019/03/09/%E5%86%99%E5%9C%A820%E5%B2%81%E7%94%9F%E6%97%A5%E8%BF%99%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>
<img src="https://s2.ax1x.com/2019/05/01/EYDYdS.jpg" width="900" height="600" alt="EYDYdS.jpg">
</center>
<blockquote class="blockquote-center"><p>不完美又何妨？<br>
万物皆有裂隙，<br>
那是光进来的地方。</p>
</blockquote>
<a id="more"></a>

        <div id="aplayer-FzITUFJF" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>
			  <script>
				  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mutex":true,"music":[{"title":"生きていたんだよな","author":"あいみょん","url":"http://music.163.com/song/media/outer/url?id=505109165.mp3","pic":"http://p2.music.126.net/QvGlOYCfXWx94a19_lmh5A==/3315027565433501.jpg?param=300x300","lrc":"/lrc/生きていたんだよな-あいみょん.lrc"}]};
				  options.element = document.getElementById("aplayer-FzITUFJF");
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  </script>
<p>已经20岁了吗？</p>
<p>我这样问自己。</p>
<p>总觉得稀里糊涂地就来到了20岁的年纪。进了大学之后，日子过得尤其迷糊，每每到了睡觉的时间点，方才发现自己今天只做了那么一点点事，方才发现自己还有很多活想做却只能留到明天去做。</p>
<p>不由得想到朱自清的《匆匆》，于是想办法记录下生活的些许瞬间，以前是用日记，后来是手账、Vlog，以此来弥补一天结束的失落感。</p>
<p>到了大二快大三的节骨眼上，就算之前一直逃避，现在也不得不直面今后的去向问题。考研or就业，出国or国内，原本有些动摇，但现在稍微笃定了一些。</p>
<p>既然如此，那就撒开手干吧。把日子过明白，别再拖延，别再找借口，直面自己的缺点，不再逃避。好歹让明年这时候的自己，骄傲一下吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>2019年2月随笔</title>
    <url>/2019/03/03/2019%E5%B9%B42%E6%9C%88%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://github.com/SwayYe/Img/raw/master/blog/blog%20profile/2019%E5%B9%B42%E6%9C%88.jpg" width="900" height="600" alt="git" align="center">
<a id="more"></a>
<p>这是本博客的第一篇月杂记，之前在建站之初，本打算每月写一篇的，如果从我在命令行中输入<code>hexo init</code>的那一天算起，其实我已经鸽了两个月的杂记了，我自然是可以给自己找无数个理由，但归根到底无非就是自己懒罢了。</p>
<h2 id="手账"><a class="header-anchor" href="#手账">¶</a>手账</h2>
<p>这个月最大的变化，应该是自己开了手账坑。目前使用的主要是两本：一本是国誉的Campus活页手账本，主要用来记录周计划以及每日日程；另一本是杂牌TN旅行手账本，本来是想用来写游记的，不过在旅行回来后开始拿来写每天的一些感想，以及涂涂画画之类的。</p>
<p>其实要说记日记的话，从大学开始就有在有道上记，不过经常会忘，一直断断续续。买了手账本后，每天晚上放在桌边都会看到，不至于忘记。</p>
<p>至于日程管理，之前一直用的Todo list，通过浏览器插件及手机APP可以同步。相比之下，手账可能缺乏一些便携性，但总觉得用纸和笔写下每天的任务，然后再在任务项前面的□中打上勾更有仪式感，也更能督促自己执行。</p>
<p>我的第一篇日记手账开始于2月11日，如果算上今天（3月3日）的话，刚好到21天。都说养成一个习惯最少需要21天，我不知道记手账这个习惯能持续多久，按照我三分热度的本质，有好多曾经豪情万丈的计划都不了了之，希望这次是个例外吧。</p>
<h2 id="过年"><a class="header-anchor" href="#过年">¶</a>过年</h2>
<p>今年2月4日是除夕，可惜的是那天我正身处海外，没有抢到各个群里的红包，更没有跟家人吃上一顿年夜饭（这是出生以来的第一次，但一定不会是最后一次）。<br>
我是2月6日上午回的国，到家的时候已经晚上了，错过了过年气氛最为浓烈的几天，再加之烟花的管控越来越严，今年的正月确实是年味最淡的一次了。<br>
但是不管年味如何淡，每年见亲戚们的机会也就在这么几天，所以还是过得挺开心。另外随着年龄的增长，过年的饭局对我而言也变得越发真实，轮到我们家请客的时候，也开始主动在厨房帮忙（虽然只是切切菜，端端盘子之类的杂活），而做客人时，亦再也无法以年龄为借口退掉酒杯了。</p>
<h2 id="手机"><a class="header-anchor" href="#手机">¶</a>手机</h2>
<p>我原来的手机（荣耀V9）在法国巴黎被扒手偷了（不愧是时尚/混乱之都），于是乎，我回国后换了个新手机，也就是目前使用的荣耀V20。<br>
先想说说备份/恢复的事，在丢手机前，老实说我一直都未曾重视过备份的问题，只体验过才知道，在如今这个没手机活不下去的时代，丢一次手机（或者手机突然暴毙）是多么麻烦的事情。最有价值的不是手机本身，而是手机内的数据及隐私信息。而云备份，无疑能把这种损失降到最低。华为的软件生态已经十分成熟，而他系统自带的云备份功能无疑是最重要的功能之一。多亏了华为云备份，我在丢了手机后可以轻松地把之前手机的照片、应用恢复到新手机上。至于密码账号密码，由于之前就已经开始用跨平台密码管理软件，所以不太担心忘记密码的问题。<br>
接下来想说一下用新手机的这半个月以来的感受。虽说手机业务近几年已经趋于饱和，但手机硬件以及软件技术的发展并没有放缓。我拿到V20第一次开机看到全面屏的时候，脑中冒出来的第一个词便是“惊艳”。经过一年的探索，全面屏的交互界面也已经比较成熟，手势操作已经可以完全替代安卓长久以来的“三大键”了，只是手势判定的流畅程度，个人觉得还是略逊于iPhone，但对我而言已经足够了。<br>
V20另一个亮点就是摄像头，4800万像素的后置摄像头，加上TOF立体深感镜头（我主要是拍景深时用到）以及AI场景识别，拍照效果完全不输iPhone。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>每月杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>建站历程：主题美化篇(序)</title>
    <url>/2018/12/29/%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B%EF%BC%9A%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E7%AF%87%EF%BC%88%E5%BA%8F%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这篇文章主要介绍为Hexo博客网站进行主题美化的一些基本操作，其他一些更深入且零散的美化操作会另行开篇。</p>
<a id="more"></a>
<h2 id="前期准备"><a class="header-anchor" href="#前期准备">¶</a>前期准备</h2>
<h3 id="配置文件"><a class="header-anchor" href="#配置文件">¶</a>配置文件</h3>
<p>首先需要区分两个不同的文件：<strong>站点配置文件</strong>和<strong>主题配置文件</strong>，他们的名字都是<code>_config.yml</code>，但前者是在<code>/blog</code>目录下，一个是在<code>/blog/themes/xxx</code>文件夹下（xxx为你的主题名字）</p>
<p>打开Hexo的站点配置文件，你会发现许多关于网站的参数可以在这个<code>_config.yml</code>文件中修改</p>
<p>在<code># Site</code>下可以修改你的网站标题、副标题、你的名字等等</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>网站标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>网站副标题</td>
</tr>
<tr>
<td><code>description</code></td>
<td>网站描述</td>
</tr>
<tr>
<td><code>author</code></td>
<td>您的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>网站使用的语言</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td>
</tr>
</tbody>
</table>
<p>其他的设置可以参看<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">这里</a></p>
<h3 id="云端更新"><a class="header-anchor" href="#云端更新">¶</a>云端更新</h3>
<p>在blog初期建设的时候，网页的布局、美化等等都还在一步步完善，需要频繁地更新博客网页。在前一篇文章<a href="http://swayye.xyz/2018/12/28/%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B%EF%BC%9A%E5%AE%89%E8%A3%85%E5%8F%8A%E9%83%A8%E7%BD%B2%E7%AF%87/" target="_blank" rel="noopener">《建站历程：安装及部署篇》</a> 的最后已经介绍过，通过</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span> </span><br><span class="line"><span class="attribute">hexo g</span> </span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>
<p>这三条指令可以更新网站，下面分别介绍这三条命令的功能：</p>
<ul>
<li>
<p><code>hexo clean</code>的功能是清楚缓存文件（<code>db.json</code>）和已生成的静态文件（<code>public</code>），该指令并非必须，只有在需要清理缓存（如跟换主题）的情况下才需要</p>
</li>
<li>
<p><code>hexo g</code>（<code>hexo generate</code>）的简写，生成静态文件</p>
</li>
<li>
<p><code>hexo d</code>（<code>hexo deploy</code> ）的简写，部署网站</p>
</li>
</ul>
<p>一般情况下，运行<code>hexo g</code>和<code>hexo d</code> 之后，博客就会更新并部署到制定域名内，也就是发布到网上。如果你不想要直接发布到网上，则可以在本地服务器内预览，在<code>hexo g</code>后输入<code>hexo s</code>（<code>hexo server</code>的简写） ，即可启动服务器，随后访问<code>http://localhost:4000</code>进行本地预览。</p>
<p>如果你发现本地预览和部署之后的网站效果不同，则有如下解决方法：</p>
<ol>
<li>用<code>hexo clean</code>删除缓存，然后重新生成静态文件并部署</li>
<li>在浏览器上删除博客网站的cookies（<a href="https://support.google.com/chrome/answer/95647?co=GENIE.Platform%3DDesktop&amp;hl=zh-Hans" target="_blank" rel="noopener">参考这里</a>）然后刷新网页</li>
</ol>
<h2 id="更换主题"><a class="header-anchor" href="#更换主题">¶</a>更换主题</h2>
<p>在安装Hexo时提供的默认主题<code>landscape</code>并不美观，不过有许多开发者为Hexo提供了很多优秀美观的主题，可以从<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的主题并安装，使用的人最多的是<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next主题</a>，有两种安装方法</p>
<ol>
<li>
<p>在<code>/blog</code>目录下直接克隆仓库：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从<a href="https://github.com/theme-next/hexo-theme-next/releases" target="_blank" rel="noopener">next的github仓库网站</a>直接下载<code>source code</code>压缩包并解压到<code>/blog/themes</code>目录</p>
</li>
</ol>
<p>安装完成后，打开<strong>站点</strong>的<strong>配置文件</strong>，找到<code>theme</code>字段，并将其值更改为<code>next</code></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<p>随后用<code>hexo s</code>本地预览查看，如果看到页面主题发生了变化，那么就表示主题安装成功了。</p>
<h2 id="主题配置"><a class="header-anchor" href="#主题配置">¶</a>主题配置</h2>
<h3 id="更换scheme"><a class="header-anchor" href="#更换scheme">¶</a>更换scheme</h3>
<p>打开<strong>主题</strong>的<strong>配置文件</strong>，找到<code>scheme setting</code>，在自己想要的scheme前面取消注释，此处我选择的是<code>Pisces</code></p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"># Scheme Settings</span></span><br><span class="line"><span class="meta"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br><span class="line"><span class="meta">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<h3 id="使用中文"><a class="header-anchor" href="#使用中文">¶</a>使用中文</h3>
<p>在主题的<code>languages</code>文件夹中可以查看该主题支持的语言</p>
<p><img src="https://github.com/SwayYe/Img/raw/master/blog/theme%20language.png" alt="img"></p>
<p>这里我们使用简体中文<code>zh-CN</code>，将<strong>站点配置文件</strong>中的<code>language</code>的参数改为<code>zh-CN</code></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN</span><br></pre></td></tr></table></figure>
<p>然后重新生成和部署就可以看到效果了</p>
<h3 id="添加分类及标签"><a class="header-anchor" href="#添加分类及标签">¶</a>添加分类及标签</h3>
<p>刚生成博客的时候，在菜单栏中是看不到<code>标签(tags)</code>和<code>(categories)</code></p>
<p><img src="https://github.com/SwayYe/Img/raw/master/blog/tag%26%20category.png" alt="avatar"></p>
<h4 id="添加-分类"><a class="header-anchor" href="#添加-分类">¶</a>添加“分类”</h4>
<p>我们首先创建“分类”选项，在<code>/blog</code>目录下打开命令行，输入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>categories</span><br></pre></td></tr></table></figure>
<p>成功后会提示</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">INFO  Created: xxxx<span class="regexp">/blog/</span><span class="keyword">source</span><span class="regexp">/categories/i</span>ndex.md</span><br></pre></td></tr></table></figure>
<p>进入该目录，打开<code>index.md</code>，在<code>data</code>那一行后面添加<code>type: &quot;categories&quot;</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-12</span><span class="number">-28</span> <span class="number">15</span><span class="string">:16:10</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>保存修改后，你就可以给自己的博文添加分类了，比如我给前一篇《建站历程：安装及部署篇》分类为<code>建站历程</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">建站历程：安装及部署篇</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-12</span><span class="number">-28</span> <span class="number">22</span><span class="string">:33:46</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">建站历程</span></span><br></pre></td></tr></table></figure>
<p>部署完成后，就可以在网站的<code>建站历程</code>分类中找到这篇文章<img src="https://github.com/SwayYe/Img/raw/master/blog/category%20illustration.png" alt="avatar"></p>
<p>需要注意的是，Hexo的一篇文章只能属于一个分类，也就是说，如果你在<code>.md</code>文件的开头写上</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="deletion">- 建站历程</span></span><br><span class="line"><span class="deletion">- hexo</span></span><br></pre></td></tr></table></figure>
<p>这篇文章并不会放在<code>建站历程</code>和<code>hexo</code>两个分类中，而是会被放在<code>建站历程</code>下的<code>hexo</code>嵌套子分类中</p>
<h4 id="添加-标签"><a class="header-anchor" href="#添加-标签">¶</a>添加“标签”</h4>
<p>用相似的方法可以创建“标签”项目，打开命令行输入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>tags</span><br></pre></td></tr></table></figure>
<p>随后在生成的<code>index.md</code>中添加<code>type: &quot;tags&quot;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-12-28 15:16:20</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>这样，在博文开头就可以添加你想要的标签了，例如在这篇《建站历程：主题美化篇》中，</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 建站历程：主题美化篇</span><br><span class="line">date: 2018-12-29 15:52:59</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>Hexo</span><br><span class="line"><span class="bullet">- </span>Next</span><br></pre></td></tr></table></figure>
<p>我添加了<code>Hexo</code>和<code>Next</code>两个标签，在博客网站的<code>标签</code>栏中，就可以看到你的所有标签</p>
<h3 id="修改作者头像"><a class="header-anchor" href="#修改作者头像">¶</a>修改作者头像</h3>
<p>打开<strong>主题</strong>的<code>_config.yml</code>配置文件，找到<code>avatar</code>一栏，有两种选择头像文件的方法</p>
<p>使用url链接：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://xxxx.jpg</span></span><br></pre></td></tr></table></figure>
<p>或者使用本地的绝对路径：(注意绝对路径是从/blog/source开始的)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="string">/images/avatar.gif</span></span><br><span class="line">   <span class="comment"># in theme directory(source/images):</span></span><br></pre></td></tr></table></figure>
<p>另外头像还有三个参数：<code>rounded</code>、<code>opacity</code>和<code>rotated</code></p>
<p>当<code>rounded</code>的值为<code>true</code>的时候，头像会自动取圆，为<code>false</code>时会以正方形显示</p>
<p><code>opacity</code>的值可以是<code>[0,1]</code>区间内的一个数，数字越大，不透明度越高</p>
<p>当<code>rotated</code>的值为<code>true</code>的时候，每次鼠标放上去，头像都会旋转一周，而为<code>false</code>的时候则没有任何效果</p>
<p>下面是<code>rounded</code>及<code>rotated</code>值均为<code>true</code>，<code>opacity</code>值为<code>1</code>时的效果图：</p>
<p><img src="https://github.com/SwayYe/Img/raw/master/blog/avatar%20rotate.gif" alt="avatar"></p>
<h3 id="修改网站-favicon-图标"><a class="header-anchor" href="#修改网站-favicon-图标">¶</a>修改网站（Favicon）图标</h3>
<p><strong>Favicon</strong>是favorites icon的缩写，亦被称为website icon（网页图标），也就是你在浏览器中打开网页时，窗口栏里面你网页名称前面的那个图标。</p>
<p>首先我们看一下默认情况下，主题使用的Favicon图标在哪里，打开<strong>主题</strong>的配置文件，找到<code>Favicon</code>一栏</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">favicon:</span></span><br><span class="line"><span class="symbol">  small:</span> <span class="meta-keyword">/images/</span>favicon<span class="number">-16</span>x16-next.png</span><br><span class="line"><span class="symbol">  medium:</span> <span class="meta-keyword">/images/</span>favicon<span class="number">-32</span>x32-next.png</span><br><span class="line"><span class="symbol">  apple_touch_icon:</span> <span class="meta-keyword">/images/</span>apple-touch-icon-next.png</span><br><span class="line"><span class="symbol">  safari_pinned_tab:</span> <span class="meta-keyword">/images/</span>logo.svg</span><br></pre></td></tr></table></figure>
<p>可以看到图标都保存在<code>/themes/next/source/images</code>文件夹里，4个不同的文件分别对应不同情况下显示图标所用的文件。</p>
<p>你可以在图片素材网站中找一个你喜欢的图标（如<a href="https://www.easyicon.net/" target="_blank" rel="noopener">EsayIcon</a>），下载并保存，注意分辨率要保存<code>16*16</code>、<code>32*32``180*180</code>三个版本，另外你可以在<a href="https://www.iloveimg.com/resize-image/resize-png" target="_blank" rel="noopener">这个网站</a>改变图片的分辨率，在<a href="https://image.online-convert.com/convert-to-svg" target="_blank" rel="noopener">这个网站</a>把png格式的图片转化成svg格式。</p>
<p>方便起见，依然把自己的4个图标文件放在<code>/themes/next/source/images</code>文件夹下，然后修改<strong>主题</strong>的配置文件，修改路径，分别指向自己的png或svg文件，随后生成并部署博客即可。</p>
<h2 id="参考文献"><a class="header-anchor" href="#参考文献">¶</a>参考文献</h2>
<ul>
<li>
<p><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">Hexo官方帮助文档：配置</a></p>
</li>
<li>
<p><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT使用文档</a></p>
</li>
<li>
<p><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/" target="_blank" rel="noopener">Hexo使用攻略-添加分类及标签</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>建站历程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>建站历程：安装及部署篇</title>
    <url>/2018/12/28/%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B%EF%BC%9A%E5%AE%89%E8%A3%85%E5%8F%8A%E9%83%A8%E7%BD%B2%E7%AF%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>（转自官方文档）Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>而通过将静态博客托管给github，可以让你的博客更方便地被其他人看到。</p>
<p>以下就是我自己整理的安装Hexo框架，并部署到github的教程：</p>
<a id="more"></a>
<h2 id="前期准备"><a class="header-anchor" href="#前期准备">¶</a>前期准备</h2>
<h3 id="安装git"><a class="header-anchor" href="#安装git">¶</a>安装git</h3>
<p>由于该blog是基于github+hexo搭建的，因此在电脑上，需要首先安装git：</p>
<ul>
<li>如果你是windows用户，直接从<a href="https://gitforwindows.org/" target="_blank" rel="noopener">这里</a>下载安装包，并默认安装即可。安装完成后，运行<code>git bash</code></li>
<li>如果你是Linux用户，且为基于<code>Debian</code>的发行版，则直接运行</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> install git-core</span><br></pre></td></tr></table></figure>
<h3 id="配置github"><a class="header-anchor" href="#配置github">¶</a>配置github</h3>
<h4 id="本地配置"><a class="header-anchor" href="#本地配置">¶</a>本地配置</h4>
<p>在linux的终端或者windows的git bash中配置自己的个人信息：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure>
<p>为了方便记忆，建议将名字和邮箱直接设置成与github账号一致。</p>
<h4 id="链接到远程仓库"><a class="header-anchor" href="#链接到远程仓库">¶</a>链接到远程仓库</h4>
<p>依然是在linux的终端或者windows的git bash中，生成新的SSH钥匙：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure>
<p>用你在本地配置中设置的邮箱替换<code>your_email@example.com</code>，随后按三次回车，你可以看到，共生成了两把钥匙，分别是秘钥和公钥，这里我们需要用到公钥，它被保存在了<code>C/Users/xxx/.ssh/id_rsa,pub</code> (windows)或者<code>~/.ssh/id_rsa.pub</code>(linux)中，找到并打开<code>id_rsa.pub</code>文件。</p>
<p>登录你的github，在网页的右上角，点击三角形，进入<code>Setting</code>页面，随后进入<code>SSH and GPG keys</code>一栏，点击<code>New SSH key</code>。在<code>Title</code>框内给这个key取个名字，然后把<code>id_rsa.pub</code>的内容复制进去并保存。<br>
<img src="https://github.com/SwayYe/Img/raw/master/blog/ssh%20key.png" alt="image"></p>
<h4 id="测试连接"><a class="header-anchor" href="#测试连接">¶</a>测试连接</h4>
<p>在linux的终端或者windows的git bash中输入<code>ssh -T git@github.com</code>，在看到提示后输入<code>yes</code>，如果在之后弹出的内容中提示的用户名是你的，说明SSH key已经匹配成功了，接下来就可以使用github了</p>
<h3 id="创建个人网站仓库"><a class="header-anchor" href="#创建个人网站仓库">¶</a>创建个人网站仓库</h3>
<p>登录github，点击<code>New repository</code>创建新仓库，命名为<code>用户名.github.io</code>，注意这里<strong>一定</strong>要用你github账号的<strong>用户名</strong></p>
<h3 id="获取个人网站域名-可选"><a class="header-anchor" href="#获取个人网站域名-可选">¶</a>获取个人网站域名（可选）</h3>
<p>这一步不是必须，即使你没有注册自己的域名，也可以在配置完成后，通过访问<code>xxx.github.io</code>来查看自己的blog.但是域名是一个网站的入口，好记且有个人标识的域名，你值得拥有。比较简便的注册域名的途径是<a href="https://wanwang.aliyun.com/domain/" target="_blank" rel="noopener">阿里云</a>和<a href="https://dnspod.cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a>。</p>
<h2 id="安装和部署"><a class="header-anchor" href="#安装和部署">¶</a>安装和部署</h2>
<h3 id="安装node-js"><a class="header-anchor" href="#安装node-js">¶</a>安装Node.js</h3>
<p>我们选用的是Hexo，一款基于<code>Node.js</code>的静态博客框架，若要安装<code>Node.js</code></p>
<ul>
<li>
<p>Windows：　从<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">这里</a>下载安装包并安装。该安装包除了<code>Node.js</code>还会一并安装<code>npm</code>，安装完成后，可以通过在命令行（注意不是git bash）输入<code>node -v</code>和<code>npm -v</code>检查<code>Node.js</code>及<code>npm</code>是否安装成功，如果显示版本数字，则表示已经安装成功<br>
<img src="https://github.com/SwayYe/Img/raw/master/blog/node%26npm.png" alt="image"></p>
</li>
<li>
<p>Linux：</p>
<p>安装<code>npm</code>：</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ sudo apt <span class="keyword">install</span> npm</span><br></pre></td></tr></table></figure>
<p>升级<code>npm</code>为最新版：</p>
  <figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">npm</span> install <span class="built_in">npm</span>@latest -g</span><br></pre></td></tr></table></figure>
<p>安装用于安装<code>Node.js</code>的模块<code>n</code>：</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ sudo npm <span class="keyword">install</span> -g n</span><br></pre></td></tr></table></figure>
<p>然后通过<code>n</code>模块安装稳定版本的<code>Node.js</code></p>
  <figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo n stable</span><br></pre></td></tr></table></figure>
<p>用与Windows同样的方法，检查<code>Node.js</code>和<code>npm</code>是否安装成功</p>
</li>
</ul>
<h3 id="安装hexo"><a class="header-anchor" href="#安装hexo">¶</a>安装Hexo</h3>
<p>在windows的命令行窗口或linux的终端中输入：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p>耐心等待安装完成。</p>
<h3 id="初始化博客"><a class="header-anchor" href="#初始化博客">¶</a>初始化博客</h3>
<p>在Hexo安装完成后，用<code>cd</code>前往你想要放blog文件的文件夹，初始化blog，输入：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo init blog</span></span><br></pre></td></tr></table></figure>
<p>随后生成静态文件：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure>
<p>启动本地服务器预览：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure>
<p>之后在浏览器中访问<code>localhost:4000</code>，若看到如下页面，恭喜你blog已经初始化成功了<br>
<img src="https://github.com/SwayYe/Img/raw/master/blog/landscape%2Bhelloworld.png" alt="image"></p>
<h3 id="部署到github个人主页"><a class="header-anchor" href="#部署到github个人主页">¶</a>部署到github个人主页</h3>
<p>上面只是本地预览，要想让自己的博客被所有能上网的人都看到，就需要将Hexo和github关联起来，在初始化blog的文件夹中，找到站点配置文件<code>_config.yml</code>，把这个文件打开，翻到最后修改：</p>
<figure class="highlight html"><figcaption><span>~/blog/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: git@github.com:用户名/用户名.github.io.git，记得加上 .git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>
<p>最后安装git部署插件，运行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>此时在命令行中依次输入三个命令：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span> </span><br><span class="line"><span class="attribute">hexo g</span> </span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>
<p>随后用浏览器访问<code>xxx.github.io</code>，如果看到与本地服务器同行的页面，就说明你的blog现在可以在网络中被访问了</p>
<h3 id="绑定域名："><a class="header-anchor" href="#绑定域名：">¶</a>绑定域名：</h3>
<p>如果你在之前注册了域名，那么现在需要将你的博客与该域名绑定.</p>
<p>第一步，登录阿里云或腾讯云（由于我使用的是阿里云，故仅在阿里云演示），进入控制台，给你管理的域名添加解析：　　<br>
<img src="https://github.com/SwayYe/Img/raw/master/blog/doman1.png" alt="image"><br>
第一条解析记录类型为Ａ，主机记录填@，记录值为你的github个人主页(<a href="http://xxx.github.io" target="_blank" rel="noopener">xxx.github.io</a>)的ip地址（<a href="http://xxx.xxx.xxx.xxx" target="_blank" rel="noopener">xxx.xxx.xxx.xxx</a>）。要获取该地址，你可以在命令行或终端中输入<code>ping xxx.github.io</code>来查看　　　　<br>
<img src="https://github.com/SwayYe/Img/raw/master/blog/domain.png" alt="image"><br>
第二条解析记录类型为CNAME，主机记录为www，记录值为你的github个人主页网址。<br>
<img src="https://github.com/SwayYe/Img/raw/master/blog/domain2.png" alt="image"><br>
第二步，登录github，进入你创建的<code>xxx.github.io</code>仓库，点击仓库的<code>setting</code>，在<code>Options</code>一栏中往下翻，找到<code>Github Page</code>，在<code>Custom domain</code>中填入自己注册好的域名，然后点击<code>save</code>保存<br>
<img src="https://github.com/SwayYe/Img/raw/master/blog/domain3.png" alt="image"><br>
第三步，进入本地博客文件夹的<code>blog/source</code>目录，新建一个文本文档，内容为你的域名<br>
<img src="https://github.com/SwayYe/Img/raw/master/blog/domian4.png" alt="image"></p>
<p>将文件重命名为<code>CNAME</code>，类型为<strong>所有文件</strong>（注意<strong>不是txt</strong>）　　<br>
做完这三步，回到<code>/blog</code>目录，在这个目录下用命令行或终端执行：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>
<p>用浏览器访问你注册的域名，看到能够加载博客，就大功告成了</p>
<h2 id="参考文献"><a class="header-anchor" href="#参考文献">¶</a>参考文献</h2>
<ul>
<li><a href="https://segmentfault.com/a/1190000005685137" target="_blank" rel="noopener">Windows下的git的安装与配置</a></li>
<li><a href="https://blog.csdn.net/chenguolinblog/article/details/19929509" target="_blank" rel="noopener">Linux下Git和GitHub使用方法总结</a></li>
<li><a href="https://segmentfault.com/a/1190000007542620" target="_blank" rel="noopener">在ubuntu上安装最新稳定版本的node及npm</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></li>
<li><a href="https://www.jianshu.com/p/f2285d63b3a8" target="_blank" rel="noopener">在github上搭建hexo个人博客（Linux-Ubuntu）</a></li>
</ul>
]]></content>
      <categories>
        <category>建站历程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>穿过生命中的泥泞时刻</title>
    <url>/2018/12/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E3%80%8A%E7%A9%BF%E8%BF%87%E7%94%9F%E5%91%BD%E4%B8%AD%E7%9A%84%E6%B3%A5%E6%B3%9E%E6%97%B6%E5%88%BB%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>出于一些原因，今天（12.27）一整天都在外面，远离电脑，而且90%的时间里只能呆坐着无所事事的那种，碰巧前段时间圣诞节一位朋友送了我一本书（hhh这也是我今年唯一的圣诞礼物），书的名字叫《穿过生命中的泥泞时刻》，带在身边便用半天的时间将其读完了。说起来，自从进了大学之后，电脑手机不离身，做的正经事没有增添多少，倒是越来越缺乏那种静下心来，腾出一整段时间好好读一本书的时间了。</p>
<p>《穿过生命中的泥泞时刻》是“真实故事计划”公众号所著的一本书，收录了他们公众号推送了的30个真实故事，书本封面中有这样一段话：“来‘真实故事计划’讲故事的人，有医生、程序员、辍学生、全职太太等。通过他们的讲述，我们试图拼凑出一幅中国人的心灵地图，标记出这代人的爱与怕”。</p>
<p>纵观这30个故事，主人公的故事大部分发生在上世纪70到90年代，也就是现在的40~60岁这个区间段的人中间，而其中故事地点又以二三线小城镇、农村为主。</p>
<p>这30个故事中，有一些描述亲情、感动人心的故事，如《尾随我十八年的姥姥》，讲述了一个出生就有视力缺陷的女孩，在父母不愿意抚养的情况下，自幼由姥姥照顾。姥姥从小就培养她独自生活的能力，让她自己去买东西、坐公交、过马路，然而每次其实都尾随其后，在女孩需要帮助的时候及时出现。在姥姥的呵护下，视障女孩最终成为了国内第一位盲人钢琴调音师的故事。</p>
<p>然而其余的故事，则多以悲剧结尾，或是充斥着心酸苦涩，不了了之。如《迟到半个世纪的情书》，讲述了一段发生在上世纪60年代的凄美爱情故事。作者的姥姥当时参与“识字班”学习汉子，与青梅竹马的教书老师暗生情愫，却最终因为家庭成分及世俗观念的原因，没能走到一起。50年后，那位老师在经历了一辈子的贫苦后，在病痛中死去，他当年想给作者姥姥的情书，一直到这时在交到她的手里。</p>
<p>在《被重点班吃掉的孩子》里面，作者就读于高中的重点班，成绩并不好，在班里不受郭思聪——一名尖子生的待见。然而在班里选拔主持人大赛参赛代表的时候，有主持经验的“我”完胜前来挑战的郭思聪，不服输的郭思聪不甘心，在众人面前多次献丑，从此这件事成为了班里其他同学笑话她的把柄。再加上“我”考试成绩超常发挥、郭自己成绩的一落千丈，在万般嘲笑和压力之下，郭思聪最终疯了。她离开了重点班，最终只考了个二本，而原本的重点班，在高考结束后，却贴出了“百分百一本”的红榜。</p>
<p>《住在我楼上的绝命毒师》则是我读完整本书后，感觉最悲惨的一个故事。化工公司的老宋是一名化工专家，他能自己造出肥皂、除草剂和消毒液等玩意。事业得意的老宋，在家庭上却十分悲惨，他媳妇貌美如花，本来与老宋生有两个儿子，然而他常年在外工作，妻子最终出轨，和其他男人生下了第三个儿子，得知真相的老宋，选择与妻子离婚。雪上加霜的是，他的两个亲生儿子都不成器，不是贪恋赌博，就是辍学在家，儿子与老宋唯一的联系就是问他要钱。当小儿子开车撞死人，欠下六十八万赔款的时候，老宋迫于无奈选择了制毒赚钱，最终锒铛入狱。</p>
<p>像以上这三个故事这样的悲剧，在书中还有很多。这些过于“真实”的真实故事，确实给人以心灵上的触动，让我忍不住读下去，走进某个平凡人的生活，然后又走进另一个。然而回过头来看书的名字《穿过生命中的泥泞时刻》，我似乎看到了一个个“生命中泥泞时刻”，却并未看到“穿过”。他们大部分深陷泥泞，一辈子都未曾脱身，让我不禁怀疑收录这些故事的初衷。也许正如豆瓣中一则短评中所说的那样，这本书“噱头大于实际内容”。这些故事，放在公众号中，也许是适合每天小酌一口的睡前故事，然而也仅仅是一个个平凡人不太平凡的故事罢了。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，世界！</title>
    <url>/2018/12/25/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C%EF%BC%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>是的，这是我的第一篇博文，按照惯例，自然是要来一声&quot;Hello World!&quot;啦</p>
<a id="more"></a>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line"><span class="addition">+     cout &lt;&lt; "Hello, World!";</span></span><br><span class="line"><span class="deletion">-     cout &lt;&lt; "Hello";</span></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想开博客的想法，其实半年前就有了，只是那个时候课业实在太忙，于是一直没有付诸实践。碰巧我寒假放得比大部分人要早，闲来无事就注册了个域名，按着教程用hexo部署了博客。</p>
<p>其实网站的部署，是三天前就搞好了，不过由于拖延症本质，一直到现在才发出第一篇博文。</p>
<p>目前的话，有以下几点计划：</p>
<ol>
<li>把自己在学习编程（C++/Python）、使用一些软件（LaTeX），以及折腾系统（Linux）的心得和体会分享出来</li>
<li>每个月写一篇随笔，记录一下一个月内发生过的事情</li>
<li>设置一下多语言博客，把中文和英文分开写，练一下自己的Writing</li>
</ol>
<p>第三条不确定会不会去做，毕竟查了一下，似乎多语言blog还挺难部署的，而且每次博文都要写中英文两个版本也着实不是件容易的事情。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/12/20/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start"><a class="header-anchor" href="#quick-start">¶</a>Quick Start</h2>
<h3 id="create-a-new-post"><a class="header-anchor" href="#create-a-new-post">¶</a>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server"><a class="header-anchor" href="#run-server">¶</a>Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files"><a class="header-anchor" href="#generate-static-files">¶</a>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="header-anchor" href="#deploy-to-remote-sites">¶</a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
